<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[设计模式-策略模式]]></title>
      <url>%2F2017%2F04%2F16%2F%5BAndroid%5D%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F%2F</url>
      <content type="text"><![CDATA[最简单的商场收银软件如果要做一款收银软件，营业员根据客户所购买商品单价和数量向客户收费，这非常容易。 Demo 如下： 点击确定后的代码逻辑如下: 1234567891011121314151617181920212223242526272829private void doEnter() &#123;String stringTotal = tv_total.getText().toString().trim();double total;if (stringTotal != null &amp;&amp; stringTotal != "") &#123; total = Double.valueOf(stringTotal);&#125; else &#123; total = 0.0d;&#125;String stringDJ = et_dj.getText().toString().trim();String stringSL = et_sl.getText().toString().trim();if (stringDJ != null &amp;&amp; !stringDJ.equals("") &amp;&amp; stringSL != null &amp;&amp; !stringSL.equals("")) &#123; Log.d("TAG", "123" + stringDJ + "123"); double price = Double.valueOf(stringDJ); int number = Integer.valueOf(stringSL); double totalPrice = price * number; total = total + totalPrice; tv_total.setText(String.valueOf(total)); String text = tv_detail.getText().toString() + "单价： " + price + " 数量：" + number + " 合计:" + totalPrice + "\n"; tv_detail.setText(text);&#125;&#125; 增加打折功能后的收银软件可是如果商场搞促销，需要打折该怎么办，不可能每次都要修改代码然后重新安装，用下拉框可能会比较方便。Demo 如下： 添加的代码如下：1234567891011 switch (sp_jsfs.getSelectedItemPosition())&#123; case 1: totalPrice*=0.8; break; case 2: totalPrice*=0.7; break; case 3: totalPrice*=0.5; break;&#125; 这样看似解决了问题，但是需求不断增加，比如满300返50之类，这样的代码未免显得太过重复。接下来我们试着用简单工厂模式来解决问题试试。 简单工厂实现 面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象抽象集合才是类。 打一折和九折只是形式的不同，抽象分析出来，所有打折算法都是一样的，所以打折算法应该是一个类。返现算法也是一个类。 MainActivity 改动如下： 12CashSuper cSuper= CashFactor.createCashAccept(sp_jsfs.getSelectedItemPosition());totalPrice=cSuper.acceptCash(totalPrice); 详细代码可以去最后上传的Demo里看 简单工厂模式虽然也能解决问题，但只是解决对象创建的问题，而且由于工厂本身包括了所有的收费方式，商场是可能经常性地更改打折和返利额度，每次维护或扩展收费方式都要改动这个工厂，以至代码要重新编译部署，这是很糟糕的，所以我们需要另一种新的设计模式–策略模式。 策略模式什么是策略模式 策略模式就是定义一系列算法，把他们独立封装起来，并且这些算法之间可以相互替换。策略模式主要是管理一堆有共性的算法，客户端可以根据需要，很快切换这些算法，并且保持可扩展性。策略模式的本质：分离算法，选择实现。 如何运用到收银系统中商场收银如何促销，用打折还是返利，其实都是一些算法，用工厂来生成算法对象，这没有错，但算法本身只是一种策略，最重要的是这些算法是随时都可能互相替换的，这是变化点，而封装变化点是我们面向对象的一种很重要的思维方式。 以下是策略模式 UML 图 接下来我们将策略模式运用到收银系统中 首先创建一个 CashContext 代码如下： 1234567891011public class CashContext &#123; private CashSuper cs; public CashContext(CashSuper cs) &#123; this.cs = cs; &#125; public double GetResule(double money)&#123; return cs.acceptCash(money); &#125;&#125; 然后改动 MainActivity 如下： 12345678910111213141516171819CashContext cc = null; switch (sp_jsfs.getSelectedItemPosition()) &#123; case 0: cc = new CashContext(new CashNormal()); break; case 1: cc = new CashContext(new CashReturn(300, 100)); break; case 2: cc = new CashContext(new CashRebate(0.8)); break; case 3: cc = new CashContext(new CashRebate(0.7)); break; case 4: cc = new CashContext(new CashRebate(0.5)); break; &#125; totalPrice = cc.GetResule(totalPrice); 这时候，你会发现，我们又像原来一样在 MainActivity 中写了判断，可以试着将之前的工厂模式和策略模式结合吗？ 策略模式与简单工厂结合将 CashContext 类的构造方法修改如下： 12345678910111213141516171819public CashContext(int type) &#123; switch (type) &#123; case 0: cs=new CashNormal(); break; case 1: cs=new CashReturn(300,100); break; case 2: cs = new CashRebate(0.8); break; case 3: cs = new CashRebate(0.7); break; case 4: cs = new CashRebate(0.5); break; &#125; &#125; MainActivity 代码修改如下： 123CashContext cc = new CashContext(sp_jsfs.getSelectedItemPosition()); totalPrice = cc.GetResule(totalPrice); total = total + totalPrice; 这样客户端只需要认识一个类 CashContext就可以了，耦合度进一步降低了。不过这样一旦需求变化依旧需要修改 switch ，其实想要更好的实现可以用反射方法，具体用法下次再做讨论。 Demo策略模式 Demo 参考文献《大话设计模式》 安卓设计模式–策略模式]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Path 实战]]></title>
      <url>%2F2017%2F04%2F15%2FPath%E5%AE%9E%E6%88%98%E4%B9%8B%E9%9B%B7%E8%BE%BE%E5%9B%BE%2F</url>
      <content type="text"><![CDATA[第一步：绘制蜘蛛网络private void init() { mainPaint=new Paint(); mainPaint.setColor(Color.BLACK); mainPaint.setAntiAlias(true); mainPaint.setStrokeWidth(1); mainPaint.setStyle(Paint.Style.STROKE); } @Override protected void onSizeChanged(int w, int h, int oldw, int oldh) { radius=Math.min(w,h)/2*0.9f; centerX=w/2; centerY=h/2; //一旦size发生改变，重新绘制 postInvalidate(); super.onSizeChanged(w, h, oldw, oldh); } @Override protected void onDraw(Canvas canvas) { drawPolygon(canvas); } /** * 绘制多边形 * @param canvas */ private void drawPolygon(Canvas canvas){ Path path=new Path(); //1度=1*PI/180 360度=2*PI 那么我们每旋转一次的角度为2*PI/内角个数 //中心与相邻两个内角相连的夹角角度 angle= (float) (2*Math.PI/count); //每个蛛丝之间的间距 float r= radius/(count-1); for (int i = 0; i &lt; count; i++) { //当前半径 float curR=r*i; path.reset(); for (int j = 0; j &lt; count; j++) { if(j==0){ path.moveTo(centerX+curR,centerY); }else { //对于直角三角形sin(x)是对边比斜边，cos(x)是底边比斜边，tan(x)是对边比底边 //因此可以推导出:底边(x坐标)=斜边(半径)*cos(夹角角度) // 对边(y坐标)=斜边(半径)*sin(夹角角度) float x = (float) (centerX+curR*Math.cos(angle*j)); float y = (float) (centerY+curR*Math.sin(angle*j)); path.lineTo(x,y); } } path.close(); canvas.drawPath(path,mainPaint); } 绘制蜘蛛网络其实就是绘制指定边数的正多边形，这一步比较简单，比较难的可能就是每个顶点的算法，相关注释我都写了，还有一张来自互联网的图以助于思考，如下： 绘制出的多边形成品如下: 动画效果只是写了 set 方法，用 handler 实现,代码如下： //设置数值种类 public void setCount(int count) { this.count = count; postInvalidate(); } //设置蜘蛛网颜色 public void setMainPaint(Paint mainPaint) { this.mainPaint = mainPaint; postInvalidate(); } 调用方法: mainPaint=new Paint(); mainPaint.setAntiAlias(true); mainPaint.setStrokeWidth(1); mainPaint.setStyle(Paint.Style.STROKE); Handler handler=new Handler(); for (int i = 3; i &lt; 20; i++) { final int finalI = i; handler.postDelayed(new Runnable() { @Override public void run() { mRdv.setCount(finalI); mainPaint.setStrokeWidth(finalI); mRdv.setMainPaint(mainPaint); } },i*300); } 第二步：绘制对角线/** * 绘制直线 */ private void drawLines(Canvas canvas){ Path path=new Path(); for (int i = 0; i &lt; count; i++) { path.reset(); path.moveTo(centerX,centerY); float x = (float) (centerX+radius*Math.cos(angle*i)); float y = (float) (centerY+radius*Math.sin(angle*i)); path.lineTo(x,y); canvas.drawPath(path,mainPaint); } } 这一步比较简单，就是将中心点和各个顶点连接起来，效果如下: 第三步：绘制标题文字/** * 绘制标题文字 * * @param canvas */ private void drawTitle(Canvas canvas) { if (count != titles.size()) { return; } //相关知识点:http://mikewang.blog.51cto.com/3826268/871765/ Paint.FontMetrics fontMetrics = textPaint.getFontMetrics(); float fontHeight = fontMetrics.descent - fontMetrics.ascent; //绘制文字时不让文字和雷达图形交叉,加大绘制半径 float textRadius = radius + fontHeight; double pi = Math.PI; for (int i = 0; i &lt; count; i++) { float x = (float) (centerX + textRadius * Math.cos(angle * i)); float y = (float) (centerY + textRadius * Math.sin(angle * i)); //当前绘制标题所在顶点角度 float degrees = angle * i; //从右下角开始顺时针画起,与真实坐标系相反 if (degrees &gt;= 0 &amp;&amp; degrees &lt; pi / 2) {//第四象限 float dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()-1); canvas.drawText(titles.get(i), x+dis, y, textPaint); } else if (degrees &gt;= pi / 2 &amp;&amp; degrees &lt; pi) {//第三象限 float dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()-1); canvas.drawText(titles.get(i), x-dis, y, textPaint); } else if (degrees &gt;= pi &amp;&amp; degrees &lt; 3 * pi / 2) {//第二象限 float dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()); canvas.drawText(titles.get(i), x-dis, y, textPaint); } else if (degrees &gt;= 3 * pi / 2 &amp;&amp; degrees &lt;= 2 * pi) {//第一象限 canvas.drawText(titles.get(i), x, y, textPaint); } } } 效果如下： 第四步：绘制覆盖区域要绘制覆盖区域，首先要指定最大值和每个分类的具体数值,有了这些数值之后，就可以绘制了。代码如下： /** * 绘制覆盖区域 */ private void drawRegion(Canvas canvas){ valuePaint.setAlpha(255); Path path=new Path(); for (int i = 0; i &lt; count; i++) { //计算该数值与最大值比例 Double perCenter = data.get(i)/maxValue; //小圆点所在位置距离圆心的距离 double perRadius=perCenter*radius; float x = (float) (centerX + perRadius * Math.cos(angle * i)); float y = (float) (centerY + perRadius * Math.sin(angle * i)); if(i==0){ path.moveTo(x,y); }else { path.lineTo(x,y); } //绘制小圆点 canvas.drawCircle(x,y,10,valuePaint); } //闭合覆盖区域 path.close(); valuePaint.setStyle(Paint.Style.STROKE); //绘制覆盖区域外的连线 canvas.drawPath(path, valuePaint); //填充覆盖区域 valuePaint.setAlpha(128); valuePaint.setStyle(Paint.Style.FILL); canvas.drawPath(path,valuePaint); } 看一下效果： 再来看一下动态的效果吧： 总结终于完成了,全部代码在下面： Android雷达图全部代码 主要是参考 crazy__chen 大神的博客，链接贴在下面，做了一遍其实还蛮简单的，这个控件还有很多不完善的，如果实际使用需要改善的地方还有很多，如果有不足希望大家可以告诉我，谢谢！！ 参考资料 Android雷达图(蜘蛛网图)绘制 Path之基本操作]]></content>
    </entry>

    
  
  
</search>
