<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jutao&#39;s Note</title>
  <subtitle>记录所得</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-04-15T16:36:16.105Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>琚涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-策略模式</title>
    <link href="http://yoursite.com/2017/04/16/%5BAndroid%5D%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/16/[Android] 设计模式-策略模式/</id>
    <published>2017-04-15T16:12:16.087Z</published>
    <updated>2017-04-15T16:36:16.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最简单的商场收银软件"><a href="#最简单的商场收银软件" class="headerlink" title="最简单的商场收银软件"></a>最简单的商场收银软件</h1><p>如果要做一款收银软件，营业员根据客户所购买商品单价和数量向客户收费，这非常容易。</p>
<p>Demo 如下：</p>
<p><img src="http://i.imgur.com/XBz9iW5.png" alt=""></p>
<a id="more"></a>
<p>点击确定后的代码逻辑如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doEnter</span><span class="params">()</span> </span>&#123;</div><div class="line">String stringTotal = tv_total.getText().toString().trim();</div><div class="line"><span class="keyword">double</span> total;</div><div class="line"><span class="keyword">if</span> (stringTotal != <span class="keyword">null</span> &amp;&amp; stringTotal != <span class="string">""</span>) &#123;</div><div class="line">  total = Double.valueOf(stringTotal);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  total = <span class="number">0.0</span>d;</div><div class="line">&#125;</div><div class="line"></div><div class="line">String stringDJ = et_dj.getText().toString().trim();</div><div class="line">String stringSL = et_sl.getText().toString().trim();</div><div class="line"><span class="keyword">if</span> (stringDJ != <span class="keyword">null</span> &amp;&amp; !stringDJ.equals(<span class="string">""</span>) &amp;&amp; stringSL != <span class="keyword">null</span> &amp;&amp; !stringSL.equals(<span class="string">""</span>)) &#123;</div><div class="line">  Log.d(<span class="string">"TAG"</span>, <span class="string">"123"</span> + stringDJ + <span class="string">"123"</span>);</div><div class="line">  <span class="keyword">double</span> price = Double.valueOf(stringDJ);</div><div class="line">  <span class="keyword">int</span> number = Integer.valueOf(stringSL);</div><div class="line">  <span class="keyword">double</span> totalPrice = price * number;</div><div class="line">  total = total + totalPrice;</div><div class="line">  tv_total.setText(String.valueOf(total));</div><div class="line">  String text = tv_detail.getText().toString()</div><div class="line">      + <span class="string">"单价： "</span></div><div class="line">      + price</div><div class="line">      + <span class="string">" 数量："</span></div><div class="line">      + number</div><div class="line">      + <span class="string">" 合计:"</span></div><div class="line">      + totalPrice</div><div class="line">      + <span class="string">"\n"</span>;</div><div class="line">  tv_detail.setText(text);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="增加打折功能后的收银软件"><a href="#增加打折功能后的收银软件" class="headerlink" title="增加打折功能后的收银软件"></a>增加打折功能后的收银软件</h1><p>可是如果商场搞促销，需要打折该怎么办，不可能每次都要修改代码然后重新安装，用下拉框可能会比较方便。<br>Demo 如下：</p>
<p><img src="http://i.imgur.com/sLqCANA.png" alt=""></p>
<p>添加的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">switch</span> (sp_jsfs.getSelectedItemPosition())&#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    totalPrice*=<span class="number">0.8</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    totalPrice*=<span class="number">0.7</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">    totalPrice*=<span class="number">0.5</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样看似解决了问题，但是需求不断增加，比如满300返50之类，这样的代码未免显得太过重复。接下来我们试着用简单工厂模式来解决问题试试。</p>
<h1 id="简单工厂实现"><a href="#简单工厂实现" class="headerlink" title="简单工厂实现"></a>简单工厂实现</h1><blockquote>
<p>面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象抽象集合才是类。</p>
</blockquote>
<p>打一折和九折只是形式的不同，抽象分析出来，所有打折算法都是一样的，所以打折算法应该是一个类。返现算法也是一个类。</p>
<p>MainActivity 改动如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">CashSuper cSuper= CashFactor.createCashAccept(sp_jsfs.getSelectedItemPosition());</div><div class="line">    totalPrice=cSuper.acceptCash(totalPrice);</div><div class="line">```   </div><div class="line"></div><div class="line">详细代码可以去最后上传的Demo里看</div><div class="line"></div><div class="line">简单工厂模式虽然也能解决问题，但只是解决对象创建的问题，而且由于工厂本身包括了所有的收费方式，商场是可能经常性地更改打折和返利额度，每次维护或扩展收费方式都要改动这个工厂，以至代码要重新编译部署，这是很糟糕的，所以我们需要另一种新的设计模式--策略模式。</div><div class="line"></div><div class="line"># 策略模式</div><div class="line"></div><div class="line">## 什么是策略模式</div><div class="line"></div><div class="line">&gt; 策略模式就是定义一系列算法，把他们独立封装起来，并且这些算法之间可以相互替换。策略模式主要是管理一堆有共性的算法，客户端可以根据需要，很快切换这些算法，并且保持可扩展性。</div><div class="line">&gt; 策略模式的本质：分离算法，选择实现。</div><div class="line"></div><div class="line">## 如何运用到收银系统中</div><div class="line"></div><div class="line">商场收银如何促销，用打折还是返利，其实都是一些算法，用工厂来生成算法对象，这没有错，但算法本身只是一种策略，最重要的是这些算法是随时都可能互相替换的，这是变化点，而封装变化点是我们面向对象的一种很重要的思维方式。</div><div class="line"></div><div class="line">以下是策略模式 UML 图</div><div class="line"></div><div class="line">![](http://i.imgur.com/WxFL8fa.png)</div><div class="line"></div><div class="line">接下来我们将策略模式运用到收银系统中</div><div class="line"></div><div class="line">首先创建一个 CashContext 代码如下：</div><div class="line"></div><div class="line">```java</div><div class="line">public class CashContext &#123;</div><div class="line">  private CashSuper cs;</div><div class="line"></div><div class="line">  public CashContext(CashSuper cs) &#123;</div><div class="line">    this.cs = cs;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  public double GetResule(double money)&#123;</div><div class="line">    return cs.acceptCash(money);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后改动 MainActivity 如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CashContext cc = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">switch</span> (sp_jsfs.getSelectedItemPosition()) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashNormal());</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashReturn(<span class="number">300</span>, <span class="number">100</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashRebate(<span class="number">0.8</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashRebate(<span class="number">0.7</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashRebate(<span class="number">0.5</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    totalPrice = cc.GetResule(totalPrice);</div></pre></td></tr></table></figure>
<p>这时候，你会发现，我们又像原来一样在 MainActivity 中写了判断，可以试着将之前的工厂模式和策略模式结合吗？</p>
<h2 id="策略模式与简单工厂结合"><a href="#策略模式与简单工厂结合" class="headerlink" title="策略模式与简单工厂结合"></a>策略模式与简单工厂结合</h2><p>将 CashContext 类的构造方法修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CashContext</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        cs=<span class="keyword">new</span> CashNormal();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        cs=<span class="keyword">new</span> CashReturn(<span class="number">300</span>,<span class="number">100</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        cs = <span class="keyword">new</span> CashRebate(<span class="number">0.8</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        cs = <span class="keyword">new</span> CashRebate(<span class="number">0.7</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">        cs = <span class="keyword">new</span> CashRebate(<span class="number">0.5</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>MainActivity 代码修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CashContext cc = <span class="keyword">new</span> CashContext(sp_jsfs.getSelectedItemPosition());</div><div class="line">      totalPrice = cc.GetResule(totalPrice);</div><div class="line">      total = total + totalPrice;</div></pre></td></tr></table></figure>
<p>这样客户端只需要认识一个类 CashContext就可以了，耦合度进一步降低了。<br>不过这样一旦需求变化依旧需要修改 switch ，其实想要更好的实现可以用反射方法，具体用法下次再做讨论。</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://github.com/jutao/strategymodel" target="_blank" rel="external">策略模式 Demo</a></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《大话设计模式》</p>
<p><a href="http://mobile.51cto.com/ahot-418972.htm" target="_blank" rel="external">安卓设计模式–策略模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最简单的商场收银软件&quot;&gt;&lt;a href=&quot;#最简单的商场收银软件&quot; class=&quot;headerlink&quot; title=&quot;最简单的商场收银软件&quot;&gt;&lt;/a&gt;最简单的商场收银软件&lt;/h1&gt;&lt;p&gt;如果要做一款收银软件，营业员根据客户所购买商品单价和数量向客户收费，这非常容易。&lt;/p&gt;
&lt;p&gt;Demo 如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/XBz9iW5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Path 实战</title>
    <link href="http://yoursite.com/2017/04/15/Path%E5%AE%9E%E6%88%98%E4%B9%8B%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/04/15/Path实战之雷达图/</id>
    <published>2017-04-15T03:39:13.886Z</published>
    <updated>2017-04-15T03:39:13.886Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一步：绘制蜘蛛网络"><a href="#第一步：绘制蜘蛛网络" class="headerlink" title="第一步：绘制蜘蛛网络"></a>第一步：绘制蜘蛛网络</h1><pre><code>private void init() {
    mainPaint=new Paint();
    mainPaint.setColor(Color.BLACK);
    mainPaint.setAntiAlias(true);
    mainPaint.setStrokeWidth(1);
    mainPaint.setStyle(Paint.Style.STROKE);
}

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    radius=Math.min(w,h)/2*0.9f;
    centerX=w/2;
    centerY=h/2;
    //一旦size发生改变，重新绘制
    postInvalidate();
    super.onSizeChanged(w, h, oldw, oldh);
}

@Override
protected void onDraw(Canvas canvas) {
    drawPolygon(canvas);
}

/**
 * 绘制多边形
 * @param canvas
 */
private void drawPolygon(Canvas canvas){
    Path path=new Path();
    //1度=1*PI/180   360度=2*PI   那么我们每旋转一次的角度为2*PI/内角个数
    //中心与相邻两个内角相连的夹角角度
    angle= (float) (2*Math.PI/count);
    //每个蛛丝之间的间距
    float r= radius/(count-1);
    for (int i = 0; i &lt; count; i++) {
        //当前半径
        float curR=r*i;
        path.reset();
        for (int j = 0; j &lt; count; j++) {
            if(j==0){
                path.moveTo(centerX+curR,centerY);
            }else {
                //对于直角三角形sin(x)是对边比斜边，cos(x)是底边比斜边，tan(x)是对边比底边
                //因此可以推导出:底边(x坐标)=斜边(半径)*cos(夹角角度)
                //               对边(y坐标)=斜边(半径)*sin(夹角角度)
                float x = (float) (centerX+curR*Math.cos(angle*j));
                float y = (float) (centerY+curR*Math.sin(angle*j));
                path.lineTo(x,y);
            }
        }
        path.close();
        canvas.drawPath(path,mainPaint);
    }
</code></pre><a id="more"></a>
<p>绘制蜘蛛网络其实就是绘制指定边数的正多边形，这一步比较简单，比较难的可能就是每个顶点的算法，相关注释我都写了，还有一张来自互联网的图以助于思考，如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-f380ea0f04b8619b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多边形夹角示意图"></p>
<p>绘制出的多边形成品如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-35a0029632035330.gif?imageMogr2/auto-orient/strip" alt="多边形效果.gif"></p>
<p>动画效果只是写了 set 方法，用 handler 实现,代码如下：</p>
<pre><code>//设置数值种类
public void setCount(int count) {
    this.count = count;
    postInvalidate();
}

//设置蜘蛛网颜色
public void setMainPaint(Paint mainPaint) {
    this.mainPaint = mainPaint;
    postInvalidate();
}
</code></pre><p>调用方法:</p>
<pre><code>mainPaint=new Paint();
mainPaint.setAntiAlias(true);
mainPaint.setStrokeWidth(1);
mainPaint.setStyle(Paint.Style.STROKE);
Handler handler=new Handler();
for (int i = 3; i &lt; 20; i++) {
final int finalI = i;
handler.postDelayed(new Runnable() {
    @Override
    public void run() {
        mRdv.setCount(finalI);
        mainPaint.setStrokeWidth(finalI);
        mRdv.setMainPaint(mainPaint);
    }
},i*300);
}
</code></pre><h1 id="第二步：绘制对角线"><a href="#第二步：绘制对角线" class="headerlink" title="第二步：绘制对角线"></a>第二步：绘制对角线</h1><pre><code>/**
 * 绘制直线
 */
private void drawLines(Canvas canvas){
    Path path=new Path();
    for (int i = 0; i &lt; count; i++) {
        path.reset();
        path.moveTo(centerX,centerY);
        float x = (float) (centerX+radius*Math.cos(angle*i));
        float y = (float) (centerY+radius*Math.sin(angle*i));
        path.lineTo(x,y);
        canvas.drawPath(path,mainPaint);
    }
}
</code></pre><p>这一步比较简单，就是将中心点和各个顶点连接起来，效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-e8349daa51b18b38.gif?imageMogr2/auto-orient/strip" alt="多边形效果.gif"></p>
<h1 id="第三步：绘制标题文字"><a href="#第三步：绘制标题文字" class="headerlink" title="第三步：绘制标题文字"></a>第三步：绘制标题文字</h1><pre><code>/**
 * 绘制标题文字
 *
 * @param canvas
 */
private void drawTitle(Canvas canvas) {
    if (count != titles.size()) {
        return;
    }
    //相关知识点:http://mikewang.blog.51cto.com/3826268/871765/
    Paint.FontMetrics fontMetrics = textPaint.getFontMetrics();
    float fontHeight = fontMetrics.descent - fontMetrics.ascent;
    //绘制文字时不让文字和雷达图形交叉,加大绘制半径
    float textRadius = radius + fontHeight;
    double pi = Math.PI;
    for (int i = 0; i &lt; count; i++) {
        float x = (float) (centerX + textRadius * Math.cos(angle * i));
        float y = (float) (centerY + textRadius * Math.sin(angle * i));
        //当前绘制标题所在顶点角度
        float degrees = angle * i;
        //从右下角开始顺时针画起,与真实坐标系相反
        if (degrees &gt;= 0 &amp;&amp; degrees &lt; pi / 2) {//第四象限
            float dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()-1);
            canvas.drawText(titles.get(i), x+dis, y, textPaint);
        } else if (degrees &gt;= pi / 2 &amp;&amp; degrees &lt; pi) {//第三象限
            float dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()-1);
            canvas.drawText(titles.get(i), x-dis, y, textPaint);
        } else if (degrees &gt;= pi &amp;&amp; degrees &lt; 3 * pi / 2) {//第二象限
            float dis=textPaint.measureText(titles.get(i))/(titles.get(i).length());
            canvas.drawText(titles.get(i), x-dis, y, textPaint);
        } else if (degrees &gt;= 3 * pi / 2 &amp;&amp; degrees &lt;= 2 * pi) {//第一象限
            canvas.drawText(titles.get(i), x, y, textPaint);
        }

    }

}
</code></pre><p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-c9132f5ff1404eaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="第四步：绘制覆盖区域"><a href="#第四步：绘制覆盖区域" class="headerlink" title="第四步：绘制覆盖区域"></a>第四步：绘制覆盖区域</h1><p>要绘制覆盖区域，首先要指定最大值和每个分类的具体数值,有了这些数值之后，就可以绘制了。<br>代码如下：</p>
<pre><code>/**
 * 绘制覆盖区域
 */
private void drawRegion(Canvas canvas){
    valuePaint.setAlpha(255);
    Path path=new Path();
    for (int i = 0; i &lt; count; i++) {
        //计算该数值与最大值比例
        Double perCenter = data.get(i)/maxValue;
        //小圆点所在位置距离圆心的距离
        double perRadius=perCenter*radius;
        float x = (float) (centerX + perRadius * Math.cos(angle * i));
        float y = (float) (centerY + perRadius * Math.sin(angle * i));
        if(i==0){
            path.moveTo(x,y);
        }else {
            path.lineTo(x,y);
        }
        //绘制小圆点
        canvas.drawCircle(x,y,10,valuePaint);
    }
    //闭合覆盖区域
    path.close();
    valuePaint.setStyle(Paint.Style.STROKE);
    //绘制覆盖区域外的连线
    canvas.drawPath(path, valuePaint);
    //填充覆盖区域
    valuePaint.setAlpha(128);
    valuePaint.setStyle(Paint.Style.FILL);
    canvas.drawPath(path,valuePaint);
}
</code></pre><p>看一下效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-d62b189d8dce1fac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>再来看一下动态的效果吧：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-50a0b0225608fc7b.gif?imageMogr2/auto-orient/strip" alt="多边形效果.gif"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于完成了,全部代码在下面：</p>
<p><a href="https://github.com/jutao/AndroidNode/blob/master/2017/2017.3/%E9%9B%B7%E8%BE%BE%E5%9B%BE%E5%85%A8%E9%83%A8%E4%BB%A3%E7%A0%81.md" target="_blank" rel="external">Android雷达图全部代码 </a></p>
<p>主要是参考 crazy__chen 大神的博客，链接贴在下面，做了一遍其实还蛮简单的，这个控件还有很多不完善的，如果实际使用需要改善的地方还有很多，如果有不足希望大家可以告诉我，谢谢！！</p>
<p>参考资料</p>
<p><a href="http://blog.csdn.net/crazy__chen/article/details/50163693" target="_blank" rel="external">Android雷达图(蜘蛛网图)绘制 </a></p>
<p><a href="https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B05%5DPath_Basic.md" target="_blank" rel="external">Path之基本操作</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一步：绘制蜘蛛网络&quot;&gt;&lt;a href=&quot;#第一步：绘制蜘蛛网络&quot; class=&quot;headerlink&quot; title=&quot;第一步：绘制蜘蛛网络&quot;&gt;&lt;/a&gt;第一步：绘制蜘蛛网络&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;private void init() {
    mainPaint=new Paint();
    mainPaint.setColor(Color.BLACK);
    mainPaint.setAntiAlias(true);
    mainPaint.setStrokeWidth(1);
    mainPaint.setStyle(Paint.Style.STROKE);
}

@Override
protected void onSizeChanged(int w, int h, int oldw, int oldh) {
    radius=Math.min(w,h)/2*0.9f;
    centerX=w/2;
    centerY=h/2;
    //一旦size发生改变，重新绘制
    postInvalidate();
    super.onSizeChanged(w, h, oldw, oldh);
}

@Override
protected void onDraw(Canvas canvas) {
    drawPolygon(canvas);
}

/**
 * 绘制多边形
 * @param canvas
 */
private void drawPolygon(Canvas canvas){
    Path path=new Path();
    //1度=1*PI/180   360度=2*PI   那么我们每旋转一次的角度为2*PI/内角个数
    //中心与相邻两个内角相连的夹角角度
    angle= (float) (2*Math.PI/count);
    //每个蛛丝之间的间距
    float r= radius/(count-1);
    for (int i = 0; i &amp;lt; count; i++) {
        //当前半径
        float curR=r*i;
        path.reset();
        for (int j = 0; j &amp;lt; count; j++) {
            if(j==0){
                path.moveTo(centerX+curR,centerY);
            }else {
                //对于直角三角形sin(x)是对边比斜边，cos(x)是底边比斜边，tan(x)是对边比底边
                //因此可以推导出:底边(x坐标)=斜边(半径)*cos(夹角角度)
                //               对边(y坐标)=斜边(半径)*sin(夹角角度)
                float x = (float) (centerX+curR*Math.cos(angle*j));
                float y = (float) (centerY+curR*Math.sin(angle*j));
                path.lineTo(x,y);
            }
        }
        path.close();
        canvas.drawPath(path,mainPaint);
    }
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Path" scheme="http://yoursite.com/tags/Path/"/>
    
      <category term="draw" scheme="http://yoursite.com/tags/draw/"/>
    
  </entry>
  
</feed>
