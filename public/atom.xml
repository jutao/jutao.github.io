<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jutao&#39;s Note</title>
  <subtitle>带三个表贯彻持续学习思想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
<<<<<<< HEAD
  <updated>2017-05-14T12:20:54.533Z</updated>
=======
  <updated>2017-07-12T05:50:42.390Z</updated>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
  <id>http://yoursite.com/</id>
  
  <author>
    <name>琚涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
<<<<<<< HEAD
=======
    <title>旋转字符串</title>
    <link href="http://yoursite.com/2017/07/12/%E6%97%8B%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2017/07/12/旋转字符串/</id>
    <published>2017-07-12T05:50:57.879Z</published>
    <updated>2017-07-12T05:50:42.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到字符串的尾部，使得原字符串变成字符串“cdefab”。请写一个函数完成此功能，要求对长度为n的字符串操作的时间复杂度为 O(n)，空间复杂度为 O(1)。</p>
<h1 id="分析与解法"><a href="#分析与解法" class="headerlink" title="分析与解法"></a>分析与解法</h1><h2 id="解法一：暴力移位法"><a href="#解法一：暴力移位法" class="headerlink" title="解法一：暴力移位法"></a>解法一：暴力移位法</h2><p>初看此题，可能最先想到的方法是按照题目所要求的，把需要移动的字符一个一个地移动到字符串的尾部，如此我们可以实现一个函数LeftShiftOne(char[] chars, int n) ，以完成移动一个字符到字符串尾部的功能，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">leftRotateString</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> ((m--)!=<span class="number">0</span>)&#123;</div><div class="line">        leftShiftOne(chars,n);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">leftShiftOne</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">    <span class="keyword">char</span> t = chars[<span class="number">0</span>];</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">        chars[i - <span class="number">1</span>] = chars[i];</div><div class="line">    &#125;</div><div class="line">    chars[n - <span class="number">1</span>] = t;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面，我们来分析一下这种方法的时间复杂度和空间复杂度。</p>
<p>针对长度为n的字符串来说，假设需要移动m个字符到字符串的尾部，那么总共需要 m<em>n 次操作，同时设立一个变量保存第一个字符，如此，时间复杂度为O(m </em> n)，空间复杂度为O(1)，空间复杂度符合题目要求，但时间复杂度不符合，所以，我们得需要寻找其他更好的办法来降低时间复杂度。</p>
<h2 id="解法二：三步反转法"><a href="#解法二：三步反转法" class="headerlink" title="解法二：三步反转法"></a>解法二：三步反转法</h2><p>对于这个问题，换一个角度思考一下。</p>
<p>将一个字符串分成X和Y两个部分，在每部分字符串上定义反转操作，如X^T，即把X的所有字符反转（如，X=”abc”，那么X^T=”cba”），那么就得到下面的结论：(X^TY^T)^T=YX，显然就解决了字符串的反转问题。</p>
<p>例如，字符串 abcdef ，若要让def翻转到abc的前头，只要按照下述3个步骤操作即可：</p>
<p>首先将原字符串分为两个部分，即X:abc，Y:def；<br>将X反转，X-&gt;X^T，即得：abc-&gt;cba；将Y反转，Y-&gt;Y^T，即得：def-&gt;fed。<br>反转上述步骤得到的结果字符串X^TY^T，即反转字符串cbafed的两部分（cba和fed）给予反转，cbafed得到defabc，形式化表示为(X^TY^T)^T=YX，这就实现了整个反转。<br>如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-aa22aec968215599.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>代码则可以这么写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将长度为n的字符串s的前m个字符移动到字符串尾部</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">leftRotateString</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</div><div class="line"><span class="comment">//        若要左移动大于n位，那么和%n 是等价的</span></div><div class="line">    m %= n;</div><div class="line">    reverseString(chars, <span class="number">0</span>, m - <span class="number">1</span>);</div><div class="line">    reverseString(chars, m, n - <span class="number">1</span>);</div><div class="line">    reverseString(chars, <span class="number">0</span>, n - <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 翻转字符数组from-to之间的字符串</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] chars, <span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</div><div class="line">    <span class="keyword">while</span> (from &lt; to) &#123;</div><div class="line">        <span class="keyword">char</span> c = chars[from];</div><div class="line">        chars[from++] = chars[to];</div><div class="line">        chars[to--] = c;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这就是把字符串分为两个部分，先各自反转再整体反转的方法，时间复杂度为O(n)，空间复杂度为O(1)，达到了题目的要求。</p>
<h1 id="举一反三"><a href="#举一反三" class="headerlink" title="举一反三"></a>举一反三</h1><p>1、链表翻转。给出一个链表和一个数k，比如，链表为1→2→3→4→5→6，k=2，则翻转后2→1→6→5→4→3，若k=3，翻转后3→2→1→6→5→4，若k=4，翻转后4→3→2→1→6→5，用程序实现。</p>
<p>2、编写程序，在原字符串中把字符串尾部的m个字符移动到字符串的头部，要求：长度为n的字符串操作时间复杂度为O(n)，空间复杂度为O(1)。 例如，原字符串为”Ilovebaofeng”，m=7，输出结果为：”baofengIlove”。</p>
<p>3、单词翻转。输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变，句子中单词以空格符隔开。为简单起见，标点符号和普通字母一样处理。例如，输入“I am a student.”，则输出“student. a am I”。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;给定一个字符串，要求把字符串前面的若干个字符移动到字符串的尾部，如把字符串“abcdef”前面的2个字符’a’和’b’移动到
    
    </summary>
    
      <category term="算法练习" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/"/>
    
    
      <category term="基础练习" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    <title>了解注解</title>
    <link href="http://yoursite.com/2017/07/12/%E4%BA%86%E8%A7%A3%E6%B3%A8%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/07/12/了解注解/</id>
    <published>2017-07-12T05:33:33.154Z</published>
    <updated>2017-07-12T05:33:33.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是注解"><a href="#什么是注解" class="headerlink" title="什么是注解"></a>什么是注解</h1><p><strong>注解</strong>（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻方便地使用这些数据。<br>注解可以提供用来完整地描述程序所需的信息，而这些信息是无法用Java来表达的。</p>
<h2 id="注解的作用及好处"><a href="#注解的作用及好处" class="headerlink" title="注解的作用及好处"></a>注解的作用及好处</h2><ul>
<li>使我们能够以将由编译器来测试和验证的格式，存储有关程序的额外信息。</li>
<li>注解可以用来生成描述符文件，甚至是新的类定义，并且有助于减轻编写“样板”代码的负担。</li>
<li>通过使用注解，我们可以将这些元数据保存在 Java 源代码中，并利用 annotation API 为自己的注解构造处理工具。</li>
<li>更加干净易读的代码以及编译期类型检查。</li>
</ul>
<h1 id="注解的基本语法"><a href="#注解的基本语法" class="headerlink" title="注解的基本语法"></a>注解的基本语法</h1><p>注解的语法比较简单，除了 @ 符号的使用之外，他基本与 Java 固有的语法一致。<br>Java SE5 内置了三种，定义在 java.lang 中的注解：@Override 、@Deprecated、@SuppressWarnings。</p>
<h2 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h2><p>在下面的例子中，使用 @Test 对 testExecute() 方法进行注解。该注解本身并不做任何事情，但是编译器要确保在其构造路径上必须有 @Test 注解的定义。</p>
<p>定义注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Test &#123;&#125;</div></pre></td></tr></table></figure></p>
<p>以上代码就是 @Test 注解的定义，与接口的定义非常类似，事实上，注解与接口一样，也会编译成 class文件。<br>除了 @ 符号以外，@ Test 的定义很像一个空的接口。定义注解时，会需要一些元注解（meta-annotation）,如 @Target 和 @Retention。@Target 用来定义你的注解将应用于什么地方（例如一个方法或者是一个域）。@Rectetion 用来定义该注解在哪一个级别可用，在源代码中（SOURCE）、类文件(CLASS)中或者运行时(RUNTIME)。<br>在注解中，一般都会包含一些元素以表达某些值，当分析处理注解时，程序或工具可以利用这些值。注解元素看起来就像接口的方法，唯一的区别就是你可以为其指定默认值。<br>没有元素的注解称为标记注解(marker annotation)，例如上例中的 @Test。</p>
<p>给方法加注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Testable</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>&#123;</div><div class="line">      System.out.println(<span class="string">"Executing.."</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="meta">@Test</span> <span class="function"><span class="keyword">void</span> <span class="title">testExecute</span><span class="params">()</span></span>&#123;execute();&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>被注解的方法与其他方法没有区别。这个例子中，注解 @Test可以与任何修饰符共同作用于方法，从语法角度看，注解的使用方式几乎和修饰符的使用一模一样。</p>
<h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><p>Java 目前内置了三种标准注解（@Override、@Deprecated、@SuppressWarnings），以及四种元注解，元注解专职负责注解其他的注解：</p>
<hr>
<ul>
<li>@Target表示该注解可以作用于什么地方。可能的 ElementType 参数包括：<ul>
<li>CONSTRUCTOR:构造器的声明</li>
<li>FIELD:域（即成员变量）声明（包括enum实例）</li>
<li>LOCAL_VARIABLE:局部变量声明</li>
<li>METHOD:方法声明</li>
<li>PACKAGE:包声明</li>
<li>PARAMTETER:参数声明</li>
<li>TYPE:类、接口（包括注解类型）或enum声明</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>@Retention表示需要什么级别保存该注解信息。。可选的 RetentionPolicy 参数包括：<ul>
<li>SOURCE:注解将被编译器丢弃</li>
<li>CLASS:注解在 class 文件中可用，但会被 VM 丢弃</li>
<li>RUNTIME:VM 将在运行期也保留注解，因此可通过反射机制读取注解信息</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>@Documented ：将此注解包含在 Javadoc中</li>
</ul>
<hr>
<ul>
<li>@Inherited：允许子类继承父类中的注解</li>
</ul>
<hr>
<h1 id="简单注解处理器"><a href="#简单注解处理器" class="headerlink" title="简单注解处理器"></a>简单注解处理器</h1><p>我们有时需要根据注解来做一些统计，来掌控项目进展。下面我们做一个小 Demo，来统计已实现的需求和未实现的需求。</p>
<p>首先定义注解，用 id 来区分方法，description 来存储一些方法说明，这一项不填即为默认值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> UseCase &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">id</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> "no description"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来写一个待检查的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassWordUtils</span> </span>&#123;</div><div class="line">	<span class="meta">@UseCase</span>(id=<span class="number">47</span>,description=</div><div class="line">			<span class="string">"密码最起码要有一个数字吧"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validatePassword</span><span class="params">(String password)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> (password.matches(<span class="string">"\\w\\d\\w*"</span>));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@UseCase</span>(id=<span class="number">48</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">encryptPassword</span><span class="params">(String password)</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StringBuilder(password).reverse().toString();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@UseCase</span>(id=<span class="number">49</span>,description=</div><div class="line">			<span class="string">"新密码不能和老密码这么像吧"</span>)</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkForNewPassword</span><span class="params">(</span></span></div><div class="line">			List&lt;String&gt; prevPasswords,String password)&#123;</div><div class="line">		<span class="keyword">return</span> !prevPasswords.contains(password);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后编写注解处理器，用来统计我们已经实现的方法和还未实现的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UseCaseTracker</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">trackUseCases</span><span class="params">(List&lt;Integer&gt; useCases, Class&lt;?&gt; cl)</span> </span>&#123;</div><div class="line">		<span class="comment">//遍历该类的所有方法</span></div><div class="line">		<span class="keyword">for</span>(Method m:cl.getDeclaredMethods())&#123;</div><div class="line">			<span class="comment">//获取加在方法上的UseCase注解</span></div><div class="line">			UseCase uc=m.getAnnotation(UseCase.class);</div><div class="line">			<span class="keyword">if</span>(uc!=<span class="keyword">null</span>)&#123;<span class="comment">//如果方法上确实有UseCase注解</span></div><div class="line">				System.out.println(<span class="string">"找到了用例:"</span>+uc.id()+<span class="string">" "</span>+uc.description());</div><div class="line">				useCases.remove(<span class="keyword">new</span> Integer(uc.id()));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i:useCases)&#123;</div><div class="line">			System.out.println(<span class="string">"警告：丢失用例:"</span>+i);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		List&lt;Integer&gt; useCases=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">		Collections.addAll(useCases, <span class="number">47</span>,<span class="number">48</span>,<span class="number">49</span>,<span class="number">50</span>,<span class="number">51</span>);</div><div class="line">		trackUseCases(useCases, PassWordUtils.class);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后输出结果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-d8f07f9703c165b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输出结果"></p>
<h1 id="注解处理器最佳实践"><a href="#注解处理器最佳实践" class="headerlink" title="注解处理器最佳实践"></a>注解处理器最佳实践</h1><p>下面我们通过注解要实现的需求是：通过在 JavaBean 上加注解，生成对应的 SQL 语句。这类似于 JavaWeb 的某些框架，虽然是个十分简单的功能，但是却是这些框架的基本原理。<br>下面先定义一个注解，这个注解用来告诉注解处理器，你需要为我生成的数据库表名叫什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.TYPE)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DBTable &#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来是数据库中的各个字段，你需要告诉处理器你的字段名、类型、是否为主键、是否唯一等等。<br>首先定义一个注解，用来告诉处理器你的字段约束。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Constraints &#123;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">primaryKey</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">allowNull</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</div><div class="line">	<span class="function"><span class="keyword">boolean</span> <span class="title">unique</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来是字段类型，我们只选两个代表，String 和 Int。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SQLString &#123;</div><div class="line">	<span class="function"><span class="keyword">int</span> <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</div><div class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">	<span class="function">Constraints <span class="title">constraints</span><span class="params">()</span> <span class="keyword">default</span> @Constraints</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Target</span>(ElementType.FIELD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SQLInteger &#123;</div><div class="line">	<span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">	<span class="function">Constraints <span class="title">constraints</span><span class="params">()</span> <span class="keyword">default</span> @Constraints</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是一个简单 Bean 的定义,用到了以上的注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DBTable</span>(name = <span class="string">"STUDENT"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line">    <span class="meta">@SQLString</span>(value = <span class="number">30</span>, name = <span class="string">"studentname"</span>, constraints = <span class="meta">@Constraints</span>(allowNull = <span class="keyword">false</span>))</div><div class="line">    String name;</div><div class="line"></div><div class="line">    <span class="meta">@SQLString</span>(value = <span class="number">50</span>, constraints = <span class="meta">@Constraints</span>(unique = <span class="keyword">true</span>))</div><div class="line">    String enjoy;</div><div class="line"></div><div class="line">    <span class="meta">@SQLInteger</span>(constraints = <span class="meta">@Constraints</span>(allowNull = <span class="keyword">false</span>))</div><div class="line">    Integer age;</div><div class="line"></div><div class="line">    <span class="meta">@SQLString</span>(value = <span class="number">30</span>, constraints = <span class="meta">@Constraints</span>(primaryKey = <span class="keyword">true</span>))</div><div class="line">    String teacherName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后是注解处理器，它将读取一个类文件，检查其上的数据库注解，并生成用来创建数据库的 SQL 命令：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TableCreator</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">            Class cl=Student.class;</div><div class="line">            DBTable dbTable = (DBTable) cl.getAnnotation(DBTable.class);</div><div class="line">            <span class="keyword">if</span> (dbTable == <span class="keyword">null</span>) &#123;</div><div class="line">                System.out.println(cl.getSimpleName() + <span class="string">"类不能生成一个数据库表格"</span>);</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            String tableName = dbTable.name();</div><div class="line">            <span class="keyword">if</span> (tableName.length() &lt; <span class="number">1</span>) &#123;</div><div class="line">                tableName = cl.getSimpleName().toUpperCase();</div><div class="line">            &#125;</div><div class="line">            List&lt;String&gt; columnDefs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">            <span class="keyword">for</span> (Field field : cl.getDeclaredFields()) &#123;</div><div class="line">                Annotation[] ans = field.getDeclaredAnnotations();</div><div class="line">                <span class="keyword">if</span> (ans.length &lt; <span class="number">1</span>) <span class="keyword">continue</span>;</div><div class="line">                String columnName = <span class="keyword">null</span>;</div><div class="line">                <span class="keyword">if</span> (ans[<span class="number">0</span>] <span class="keyword">instanceof</span> SQLInteger) &#123;</div><div class="line">                    SQLInteger sInt = (SQLInteger) ans[<span class="number">0</span>];</div><div class="line">                    <span class="keyword">if</span> (sInt.name().length() &lt; <span class="number">1</span>) &#123;</div><div class="line">                        columnName = field.getName().toUpperCase();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        columnName = sInt.name().toUpperCase();</div><div class="line">                    &#125;</div><div class="line">                    columnDefs.add(columnName + <span class="string">" INT "</span> + getConstraints(sInt.constraints()));</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ans[<span class="number">0</span>] <span class="keyword">instanceof</span> SQLString) &#123;</div><div class="line">                    SQLString sString = (SQLString) ans[<span class="number">0</span>];</div><div class="line">                    <span class="keyword">if</span> (sString.name().length() &lt; <span class="number">1</span>) &#123;</div><div class="line">                        columnName = field.getName().toUpperCase();</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        columnName = sString.name().toUpperCase();</div><div class="line">                    &#125;</div><div class="line">                    columnDefs.add(columnName + <span class="string">" VARCHAR("</span> + sString.value() + <span class="string">") "</span> + getConstraints(sString.constraints()));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            StringBuilder createCommand = <span class="keyword">new</span> StringBuilder(</div><div class="line">                    <span class="string">"CREATE TABLE "</span> + tableName + <span class="string">"("</span></div><div class="line">            );</div><div class="line">            <span class="keyword">for</span> (String columnDef : columnDefs) &#123;</div><div class="line">                createCommand.append(<span class="string">"\n    "</span> + columnDef + <span class="string">","</span>);</div><div class="line">            &#125;</div><div class="line">            String tableCreate=createCommand.substring(<span class="number">0</span>,createCommand.length()-<span class="number">1</span>)+<span class="string">");"</span>;</div><div class="line">            System.out.println(<span class="string">"根据"</span> + cl.getName() + <span class="string">"创建数据库：\n"</span> + tableCreate);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getConstraints</span><span class="params">(Constraints con)</span> </span>&#123;</div><div class="line">        String constraints = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (!con.allowNull()) &#123;</div><div class="line">            constraints += <span class="string">" NOT NULL "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (con.primaryKey()) &#123;</div><div class="line">            constraints += <span class="string">" PRIMARY KEY "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (con.unique()) &#123;</div><div class="line">            constraints += <span class="string">" UNIQUE "</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> constraints;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我们实现的功能还很低级，如果你要改任何属性或者参数，都要重新编译 Java 代码，现在的很多框架都会生成 XML 文件，而不是 SQL 语句，但基本原理都是这样的。</p>
<h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>本篇文章只是 《Java 编程思想》的学习笔记，看了网上的很多资料，觉得还是这本书讲的最好。</p>
<<<<<<< HEAD
=======
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍
    
    </summary>
    
      <category term="Java 基础" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>aidl 浅析</title>
    <link href="http://yoursite.com/2017/04/19/aidl%20%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/19/aidl 浅析/</id>
    <published>2017-04-19T01:22:05.577Z</published>
    <updated>2017-04-19T01:22:05.577Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo-地址"><a href="#Demo-地址" class="headerlink" title="Demo 地址"></a>Demo 地址</h1><p><a href="https://github.com/jutao/aidl" title="AIDL服务端" target="_blank" rel="external">https://github.com/jutao/aidl</a><br><a href="https://github.com/jutao/aidlclient" target="_blank" rel="external">AIDL客户端</a></p>
<h1 id="什么是AIDL"><a href="#什么是AIDL" class="headerlink" title="什么是AIDL"></a>什么是AIDL</h1><p>在 Android中，每一个应用程序独自拥有一个虚拟机，这样做虽然保证了进程之内数据的安全性，保证一个应用程序的数据不受其他应用程序的影响，也保证了一个应用程序挂掉了不至于影响其他应用程序。但是这样也造成了一个应用程序和另外一个应用程序没办法直接进行通讯。AIDL 的作用就是使来自不同应用的客户端跨进程通信访问你的 Service。<br>AIDL 是 Android Interface Definition Language 的缩写，就是安卓内部通信接口描述语言。关于 AIDL的描述和用法我主要参考了Google 的官方API，找到一个中文的，链接：<a href="http://www.android-doc.com/guide/components/aidl.html" title="AIDL" target="_blank" rel="external">http://www.android-doc.com/guide/components/aidl.html</a>。需要补充的是，API里描述AIDL支持Java语言中的所有基本数据类型，但是经过查证和实验，实际上 AIDL 是不支持Short类型的。</p>
<h1 id="AIDL用法"><a href="#AIDL用法" class="headerlink" title="AIDL用法"></a>AIDL用法</h1><h2 id="创建-AIDL-接口"><a href="#创建-AIDL-接口" class="headerlink" title="创建 AIDL 接口"></a>创建 AIDL 接口</h2><p><img src="http://i.imgur.com/hIeNjic.png" alt=""><br>如果是 Eclipse 的话需要创建 File 并且不要忘记自己打上后缀 .aidl。</p>
<h2 id="写-AIDL-接口"><a href="#写-AIDL-接口" class="headerlink" title="写 AIDL 接口"></a>写 AIDL 接口</h2><p>AIDL 的用法基本和写普通 Java 接口相同，需要注意的是包名一定要自己检查一下，还有导包也要自己写一下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.jutao.aidl;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServiceAidl</span> </span>&#123;</div><div class="line"><span class="comment">//计算两个数的和</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写完之后需要注意，如果你写的 AIDL 接口正确，那么 Ecipse 是会自动编译的，而 Android Studio 需要手动编译，编译按钮如下图所示：</p>
<p><img src="http://i.imgur.com/NnSnU2a.png" alt=""></p>
<p>编译通过后，Android Studio 所生成的文件在这里：</p>
<p><img src="http://i.imgur.com/VTAkxIR.png" alt=""></p>
<h2 id="写-Service"><a href="#写-Service" class="headerlink" title="写 Service"></a>写 Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当客户端绑定到该服务的时候</span></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">  <span class="comment">//当别人绑定服务的时候，就会得到AIDL接口</span></div><div class="line">  <span class="keyword">return</span> iBinder;</div><div class="line">&#125;</div><div class="line">IBinder iBinder = <span class="keyword">new</span> IServiceAidl.Stub() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">  Log.d(<span class="string">"TAG"</span>, <span class="string">"收到服务端请求,求出"</span> + num1 + <span class="string">"和"</span> + num2 + <span class="string">"的和"</span>);</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- exported 是否支持其它应用调用当前组件 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- enabled 这个属性用于指示该服务是否能够被实例化。如果设置为true，则能够被实例化，否则不能被实例化。默认值是true --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">service</span></span></div><div class="line">      <span class="attr">android:name</span>=<span class="string">"com.example.aidl_service.RemoteService"</span></div><div class="line">      <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:exported</span>=<span class="string">"true"</span> &gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="写客户端"><a href="#写客户端" class="headerlink" title="写客户端"></a>写客户端</h2><p>客户端的主要功能是用户通过界面输入两个数字，点击远程计算按钮后通过服务端代码计算出结果返回给客户端并显示。</p>
<p><img src="http://i.imgur.com/zoqkeKX.png" alt=""></p>
<p>点击按钮后</p>
<p><img src="http://i.imgur.com/JAs8dhp.png" alt=""></p>
<p>需要注意的是，客户端也需要有一模一样的 AIDL 包，连包名都要一模一样！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、获取服务端</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line"><span class="comment">//Android 5.0之后不支持隐式意图，必须是显式意图来启动绑定服务</span></div><div class="line">intent.setComponent(</div><div class="line"><span class="keyword">new</span> ComponentName(<span class="string">"com.example.jutao.aidl"</span>, <span class="string">"com.example.jutao.aidl.RemoteService"</span>));</div><div class="line"><span class="comment">//第三个参数是一个flag，绑定时自动启动</span></div><div class="line">bindService(intent, conn, Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure>
<p>conn的定义:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">  <span class="comment">//绑定服务时</span></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">    <span class="comment">//拿到了远程的服务</span></div><div class="line">    iServiceAidl = IServiceAidl.Stub.asInterface(service);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//当服务断开时</span></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">    <span class="comment">//回收资源</span></div><div class="line">    iServiceAidl = <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h1 id="AIDL-自定义类型"><a href="#AIDL-自定义类型" class="headerlink" title="AIDL 自定义类型"></a>AIDL 自定义类型</h1><p><img src="http://i.imgur.com/xnkwiMg.png" alt=""><br>AIDL 默认支持的数据类型如上图所示，虽然支持List类型，但是需要 在List前注明输入List还是输出List，下面的例子会讲到。<br>首先 person 类要实现 Parcelable 接口，详细代码可以在我开头贴的Demo里看。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.example.jutao.aidl.Person;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonAidl</span> </span>&#123;</div><div class="line">   <span class="function">List&lt;Person&gt; <span class="title">add</span><span class="params">(in Person person)</span></span>;</div><div class="line">&#125;</div><div class="line">parcelable Person;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> ArrayList&lt;Person&gt; persons;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PersonService</span><span class="params">()</span> </span>&#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line"></div><div class="line"><span class="keyword">return</span> iBinder;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> IBinder iBinder = <span class="keyword">new</span> PersonAidl.Stub() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">add</span><span class="params">(Person person)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">  persons.add(person);</div><div class="line">  <span class="keyword">return</span> persons;</div><div class="line">&#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/78H8w2N.png" alt=""><br>可以看到，我每次输出的都是 persons 这一List，这是通过服务端返回的，说明我传输过去的值已经被服务端接收并存储。</p>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
]]></content>
    
    <summary type="html">
    
<<<<<<< HEAD
      &lt;h1 id=&quot;什么是注解&quot;&gt;&lt;a href=&quot;#什么是注解&quot; class=&quot;headerlink&quot; title=&quot;什么是注解&quot;&gt;&lt;/a&gt;什么是注解&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注解&lt;/strong&gt;（也被称为元数据）为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍
    
    </summary>
    
      <category term="Java 基础" scheme="http://yoursite.com/categories/Java-%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="注解" scheme="http://yoursite.com/tags/%E6%B3%A8%E8%A7%A3/"/>
=======
      &lt;h1 id=&quot;Demo-地址&quot;&gt;&lt;a href=&quot;#Demo-地址&quot; class=&quot;headerlink&quot; title=&quot;Demo 地址&quot;&gt;&lt;/a&gt;Demo 地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jutao/aidl&quot; title=&quot;AID
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android 知识点" scheme="http://yoursite.com/tags/Android-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    
  </entry>
  
  <entry>
    <title>Hanler 原理梳理</title>
    <link href="http://yoursite.com/2017/04/17/Handler%E5%8E%9F%E7%90%86%E6%A2%B3%E7%90%86/"/>
    <id>http://yoursite.com/2017/04/17/Handler原理梳理/</id>
    <published>2017-04-17T15:03:19.203Z</published>
    <updated>2017-04-17T15:11:19.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Handler 在 Android 开发中非常常见，它的常见用法相信只要稍微学过一些 Android 基础的朋友都已经烂熟于心，但是他背后的原理对于初学者来说比较复杂，这篇文章梳理了 Handler 的调用流程，通过源码观察 Hanler 背后的原理。</p>
<h1 id="子线程创建-Handler"><a href="#子线程创建-Handler" class="headerlink" title="子线程创建 Handler"></a>子线程创建 Handler</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    handler1 = <span class="keyword">new</span> Handler();</div><div class="line">  &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>如果按照上面的代码来创建一个 Handler，运行程序，发现程序崩溃了，错误提示信息如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.RuntimeException: Can<span class="string">'t create handler inside thread that has not called Looper.prepare()</span></div></pre></td></tr></table></figure></p>
<p>也就是说，不能在没有调用 Looper.prepare() 方法的线程中创建 Handler。那么我们就先调用一下 Looper.prepare()。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">      Looper.prepare();</div><div class="line">      handler1 = <span class="keyword">new</span> Handler();</div><div class="line">    &#125;</div><div class="line">  &#125;).start();</div></pre></td></tr></table></figure>
<p>这样程序果然不报错了，这是为什么呢，我们观察源码寻找答案。我们一开始出错是在创建 Handler 的时候，所以很有可能是 Handler 在构造函数里做了些什么，所以我选择首先观察 Handler 构造函数。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">   	<span class="comment">//省略部分源码</span></div><div class="line"></div><div class="line">    mLooper = Looper.myLooper();</div><div class="line">    <span class="keyword">if</span> ( mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">            <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，源码中先是通过 Looper.myLooper() 方法获取一个 Looper 对象，然后判断这个对象是否为空，如果是空的就抛出一个异常，这个异常就是我们刚才看到的那个。为什么不调用 Looper.prepare() 方法 Looper.myLooper() 获取的对象就为空呢？先看 Looper.myLooper()方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>原来是把 Looper 存储到了一个线程存储器中，如果没有 Looper 对象，返回自然为空。这个 sThreadLocal 我们是操作不了的，所以想一想就可以知道，一定是 Looper.prepare() 中进行了存储。看 prepare() 方法源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再往下追：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，首先判断 sThreadLocal 中是否已经存在Looper，如果还没有则创建一个新的 Looper 设置进去。这样也就完全解释了为什么我们要先调用 Looper.prepare() 方法，才能创建 Handler 对象。同时也可以看出每个线程中最多只会有一个 Looper 对象。<br>那为什么我们在主线程可以直接创建 Handler 呢？一定是主线程已经替我们调用了 Looper.prepare() 方法。查看ActivityThread中的main()方法验证我们的猜想,源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">      SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">      <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">      <span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">      <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">      CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">      Environment.initForCurrentUser();</div><div class="line"></div><div class="line">      <span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">      EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">      Security.addProvider(<span class="keyword">new</span> AndroidKeyStoreProvider());</div><div class="line"></div><div class="line">      Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">      Looper.prepareMainLooper();</div><div class="line"></div><div class="line">	<span class="comment">//省略</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到上面的代码调用了一个  Looper.prepareMainLooper() 方法，我一开始以为只要我在子线程也调用 Looper.prepareMainLooper() 方法，就可以在子线程修改 UI 了，但是报错如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalStateException: The main Looper has already been prepared.</div></pre></td></tr></table></figure></p>
<p>也就是说，我的想法还不算太荒谬， Looper.prepareMainLooper() 方法就是区分子线程和主线程的关键所在。我们进去看看它都做了些什么：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepareMainLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">    prepare(<span class="keyword">false</span>);</div><div class="line">    <span class="keyword">synchronized</span> (Looper.class) &#123;</div><div class="line">        <span class="keyword">if</span> (sMainLooper != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The main Looper has already been prepared."</span>);</div><div class="line">        &#125;</div><div class="line">        sMainLooper = myLooper();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>原来如此，虽然主线程最终也调用了 prepare() 方法,但是给的值是 false，我们之前调用 prepare() 方法，默认值为 true，是不是感觉恍然大悟呢，不得不赞叹源码写的真是巧妙啊！！</p>
<p>到这里，我相信大家都和我一样，明白了为什么要先调用 Looper.prepare() 方法才可以创建 Handler 对象。我想过自己重写一个Handler 对象试试看能不能跳过这一步，但是你会发现，没有 Looper对象，你创建了也是白搭呀，至于为什么白搭，继续看下面的分析。</p>
<h1 id="Handler-消息发送"><a href="#Handler-消息发送" class="headerlink" title="Handler 消息发送"></a>Handler 消息发送</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">    Message message = <span class="keyword">new</span> Message();</div><div class="line">    message.what=<span class="number">1</span>;</div><div class="line">    Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">    bundle.putString(<span class="string">"data"</span>, <span class="string">"data"</span>);</div><div class="line">    message.setData(bundle);</div><div class="line">    handler.sendMessage(message);</div><div class="line">  &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>这段代码相信大家都非常熟悉了，那它到底把 Message 发到哪里去了呢？Handler 给我们提供了很多方法来发送消息，有 post 的，也有 send 的。通过观察源码，你会发现，除了 enqueueMessage() 方法，其他所有发送消息的方法最后都会走到 sendMessageAtTime() 方法中，但是他们最终都会调用 MessageQueue 类中的 enqueueMessage() 方法，这肯定就是入队方法了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AndroidRuntimeException(<span class="string">"Message must have a target."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                    msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">            Log.w(<span class="string">"MessageQueue"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        <span class="keyword">boolean</span> needWake;</div><div class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">            <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">            <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">            <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">            needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            <span class="keyword">for</span> (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">        <span class="keyword">if</span> (needWake) &#123;</div><div class="line">            nativeWake(mPtr);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过源码可知，这个消息队列实际上是按照发送延时时间，也就是 when 来降序排序的，这样我们发送的消息就按照发送时间排好队了，但是他们排好队要去哪里呢，也就是出队操作在哪执行呢？我们再来分析 ActivityThread 中的 main 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line"></div><div class="line">    	<span class="comment">//省略部分源码</span></div><div class="line"></div><div class="line">      Looper.prepareMainLooper();</div><div class="line"></div><div class="line">      ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">      thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">          sMainThreadHandler = thread.getHandler();</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      AsyncTask.init();</div><div class="line"></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">          Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                  LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      Looper.loop();</div><div class="line"></div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>你会发现，Looper.prepareMainLooper() 或者  Looper.prepare() 方法总是和 Looper.loop() 方法对应，有你必有它，那么我可以合理的怀疑这个 Looper.loop() 方法很有可能就是执行出队操作的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">      <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line"></div><div class="line">      <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">      <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">      Binder.clearCallingIdentity();</div><div class="line">      <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">      <span class="keyword">for</span> (;;) &#123;</div><div class="line">          Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">          <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">              <span class="keyword">return</span>;</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">          Printer logging = me.mLogging;</div><div class="line">          <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">              logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                      msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          msg.target.dispatchMessage(msg);</div><div class="line"></div><div class="line">          <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">              logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">          <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">          <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">          <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">              Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                      + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                      + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                      + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                      + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          msg.recycle();</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>可以看到，这段代码从 13 行 开始进入了一个死循环，Message msg = queue.next() 就是我们要找的出队方法，而且还是一个阻塞方法，它的简单逻辑就是如果当前 MessageQueue 中存在 mMessages(即待处理消息)，就将这个消息出队，然后让下一条消息成为 mMessages，否则就进入一个阻塞状态，一直等到有新的消息入队。接下来比较重要的代码就是 msg.target.dispatchMessage(msg)，这个 target 其实就是 Handler 发送消息的 Handler 对象，观察 handler 调用入队方法的必经之路 enqueueMessage() 方法可知：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">      msg.target = <span class="keyword">this</span>;</div><div class="line">      <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">          msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>看上面代码的第二行。</p>
<p>所以我们可以知道，loop() 方法把最新出队的 message 又传给了 Handler 对象 的 dispatchMessage() 方法，所以我们肯定要观察 dispatchMessage() 方法了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">          handleCallback(msg);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">              <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                  <span class="keyword">return</span>;</div><div class="line">              &#125;</div><div class="line">          &#125;</div><div class="line">          handleMessage(msg);</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>dispatchMessage() 方法的逻辑为：如果 msg.callback 不为空(callback 一般是通过 Handler 的 post 系列方法设置的，是一个 Runnable 对象)，则执行 message.callback.run() 方法。否则判断 mCallback 如果不为空，则调用 mCallback 的 handleMessage()方法，否则直接调用 Handler 的 handleMessage() 方法，并将消息对象作为参数传递过去。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面就是 Handler 的一个完整的从信息发送到执行的流程。流程图如下：<br><img src="http://i.imgur.com/SGuBgaN.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Handler 在 Android 开发中非常常见，它的常见用法相信只要稍微学过一些 Android 基础的朋友都已经烂熟于心，但是他背后的
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android 知识点" scheme="http://yoursite.com/tags/Android-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>aidl 浅析</title>
    <link href="http://yoursite.com/2017/04/17/aidl%20%E6%B5%85%E6%9E%90/"/>
    <id>http://yoursite.com/2017/04/17/aidl 浅析/</id>
    <published>2017-04-17T14:44:45.256Z</published>
    <updated>2017-04-17T14:56:51.146Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Demo-地址"><a href="#Demo-地址" class="headerlink" title="Demo 地址"></a>Demo 地址</h1><p><a href="https://github.com/jutao/aidl" title="AIDL服务端" target="_blank" rel="external">https://github.com/jutao/aidl</a><br><a href="https://github.com/jutao/aidlclient" target="_blank" rel="external">AIDL客户端</a></p>
<h1 id="什么是AIDL"><a href="#什么是AIDL" class="headerlink" title="什么是AIDL"></a>什么是AIDL</h1><p>在 Android中，每一个应用程序独自拥有一个虚拟机，这样做虽然保证了进程之内数据的安全性，保证一个应用程序的数据不受其他应用程序的影响，也保证了一个应用程序挂掉了不至于影响其他应用程序。但是这样也造成了一个应用程序和另外一个应用程序没办法直接进行通讯。AIDL 的作用就是使来自不同应用的客户端跨进程通信访问你的 Service。<br>AIDL 是 Android Interface Definition Language 的缩写，就是安卓内部通信接口描述语言。关于 AIDL的描述和用法我主要参考了Google 的官方API，找到一个中文的，链接：<a href="http://www.android-doc.com/guide/components/aidl.html" title="AIDL" target="_blank" rel="external">http://www.android-doc.com/guide/components/aidl.html</a>。需要补充的是，API里描述AIDL支持Java语言中的所有基本数据类型，但是经过查证和实验，实际上 AIDL 是不支持Short类型的。</p>
<h1 id="AIDL用法"><a href="#AIDL用法" class="headerlink" title="AIDL用法"></a>AIDL用法</h1><h2 id="创建-AIDL-接口"><a href="#创建-AIDL-接口" class="headerlink" title="创建 AIDL 接口"></a>创建 AIDL 接口</h2><p><img src="http://i.imgur.com/hIeNjic.png" alt=""><br>如果是 Eclipse 的话需要创建 File 并且不要忘记自己打上后缀 .aidl。</p>
<h2 id="写-AIDL-接口"><a href="#写-AIDL-接口" class="headerlink" title="写 AIDL 接口"></a>写 AIDL 接口</h2><p>AIDL 的用法基本和写普通 Java 接口相同，需要注意的是包名一定要自己检查一下，还有导包也要自己写一下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.jutao.aidl;</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IServiceAidl</span> </span>&#123;</div><div class="line"><span class="comment">//计算两个数的和</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写完之后需要注意，如果你写的 AIDL 接口正确，那么 Ecipse 是会自动编译的，而 Android Studio 需要手动编译，编译按钮如下图所示：</p>
<p><img src="http://i.imgur.com/NnSnU2a.png" alt=""></p>
<p>编译通过后，Android Studio 所生成的文件在这里：</p>
<p><img src="http://i.imgur.com/VTAkxIR.png" alt=""></p>
<h2 id="写-Service"><a href="#写-Service" class="headerlink" title="写 Service"></a>写 Service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当客户端绑定到该服务的时候</span></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">  <span class="comment">//当别人绑定服务的时候，就会得到AIDL接口</span></div><div class="line">  <span class="keyword">return</span> iBinder;</div><div class="line">&#125;</div><div class="line">IBinder iBinder = <span class="keyword">new</span> IServiceAidl.Stub() &#123;</div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">  Log.d(<span class="string">"TAG"</span>, <span class="string">"收到服务端请求,求出"</span> + num1 + <span class="string">"和"</span> + num2 + <span class="string">"的和"</span>);</div><div class="line">  <span class="keyword">return</span> num1 + num2;</div><div class="line">&#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- exported 是否支持其它应用调用当前组件 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- enabled 这个属性用于指示该服务是否能够被实例化。如果设置为true，则能够被实例化，否则不能被实例化。默认值是true --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">service</span></span></div><div class="line">      <span class="attr">android:name</span>=<span class="string">"com.example.aidl_service.RemoteService"</span></div><div class="line">      <span class="attr">android:enabled</span>=<span class="string">"true"</span></div><div class="line">      <span class="attr">android:exported</span>=<span class="string">"true"</span> &gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">service</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="写客户端"><a href="#写客户端" class="headerlink" title="写客户端"></a>写客户端</h2><p>客户端的主要功能是用户通过界面输入两个数字，点击远程计算按钮后通过服务端代码计算出结果返回给客户端并显示。</p>
<p><img src="http://i.imgur.com/zoqkeKX.png" alt=""></p>
<p>点击按钮后</p>
<p><img src="http://i.imgur.com/JAs8dhp.png" alt=""></p>
<p>需要注意的是，客户端也需要有一模一样的 AIDL 包，连包名都要一模一样！！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//1、获取服务端</span></div><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line"><span class="comment">//Android 5.0之后不支持隐式意图，必须是显式意图来启动绑定服务</span></div><div class="line">intent.setComponent(</div><div class="line"><span class="keyword">new</span> ComponentName(<span class="string">"com.example.jutao.aidl"</span>, <span class="string">"com.example.jutao.aidl.RemoteService"</span>));</div><div class="line"><span class="comment">//第三个参数是一个flag，绑定时自动启动</span></div><div class="line">bindService(intent, conn, Context.BIND_AUTO_CREATE);</div></pre></td></tr></table></figure>
<p>conn的定义:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ServiceConnection conn = <span class="keyword">new</span> ServiceConnection() &#123;</div><div class="line">  <span class="comment">//绑定服务时</span></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</div><div class="line">    <span class="comment">//拿到了远程的服务</span></div><div class="line">    iServiceAidl = IServiceAidl.Stub.asInterface(service);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//当服务断开时</span></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</div><div class="line">    <span class="comment">//回收资源</span></div><div class="line">    iServiceAidl = <span class="keyword">null</span>;</div><div class="line">  &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h1 id="AIDL-自定义类型"><a href="#AIDL-自定义类型" class="headerlink" title="AIDL 自定义类型"></a>AIDL 自定义类型</h1><p><img src="http://i.imgur.com/xnkwiMg.png" alt=""><br>AIDL 默认支持的数据类型如上图所示，虽然支持List类型，但是需要 在List前注明输入List还是输出List，下面的例子会讲到。<br>首先 person 类要实现 Parcelable 接口，详细代码可以在我开头贴的Demo里看。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.example.jutao.aidl.Person;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonAidl</span> </span>&#123;</div><div class="line">   <span class="function">List&lt;Person&gt; <span class="title">add</span><span class="params">(in Person person)</span></span>;</div><div class="line">&#125;</div><div class="line">parcelable Person;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> ArrayList&lt;Person&gt; persons;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">PersonService</span><span class="params">()</span> </span>&#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</div><div class="line"></div><div class="line"><span class="keyword">return</span> iBinder;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> IBinder iBinder = <span class="keyword">new</span> PersonAidl.Stub() &#123;</div><div class="line"></div><div class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">add</span><span class="params">(Person person)</span> <span class="keyword">throws</span> RemoteException </span>&#123;</div><div class="line">  persons.add(person);</div><div class="line">  <span class="keyword">return</span> persons;</div><div class="line">&#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/78H8w2N.png" alt=""><br>可以看到，我每次输出的都是 persons 这一List，这是通过服务端返回的，说明我传输过去的值已经被服务端接收并存储。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Demo-地址&quot;&gt;&lt;a href=&quot;#Demo-地址&quot; class=&quot;headerlink&quot; title=&quot;Demo 地址&quot;&gt;&lt;/a&gt;Demo 地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/jutao/aidl&quot; title=&quot;AID
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Android 知识点" scheme="http://yoursite.com/tags/Android-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Path 学习笔记之基本操作</title>
<<<<<<< HEAD
    <link href="http://yoursite.com/2017/04/16/Path%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/04/16/Path学习笔记之基本操作/</id>
    <published>2017-04-16T03:29:27.955Z</published>
    <updated>2017-05-14T12:36:54.333Z</updated>
=======
    <link href="http://yoursite.com/2017/04/17/Path%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2017/04/17/Path学习笔记之基本操作/</id>
    <published>2017-04-17T09:19:40.605Z</published>
    <updated>2017-04-21T08:26:43.516Z</updated>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    
    <content type="html"><![CDATA[<h1 id="path-常用方法一览"><a href="#path-常用方法一览" class="headerlink" title="path 常用方法一览"></a>path 常用方法一览</h1><blockquote>
<p>为了兼容性(<em>偷懒</em>) 本表格中去除了部分API21(即安卓版本5.0)以上才添加的方法。</p>
</blockquote>
<table>
<thead>
<tr>
<th>作用</th>
<th>相关方法</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td>移动起点</td>
<td>moveTo</td>
<td>移动下一次操作的起点位置</td>
</tr>
<tr>
<td>设置终点</td>
<td>setLastPoint</td>
<td>重置当前path中最后一个点位置，如果在绘制之前调用，效果和moveTo相同</td>
</tr>
<tr>
<td>连接直线</td>
<td>lineTo</td>
<td>添加上一个点到当前点之间的直线到Path</td>
</tr>
<tr>
<td>闭合路径</td>
<td>close</td>
<td>连接第一个点连接到最后一个点，形成一个闭合区域</td>
</tr>
<tr>
<td>添加内容</td>
<td>addRect, addRoundRect,  addOval, addCircle,     addPath, addArc, arcTo</td>
<td>添加(矩形， 圆角矩形， 椭圆， 圆， 路径， 圆弧) 到当前Path (注意addArc和arcTo的区别)</td>
</tr>
<tr>
<td>是否为空</td>
<td>isEmpty</td>
<td>判断Path是否为空</td>
</tr>
<tr>
<td>是否为矩形</td>
<td>isRect</td>
<td>判断path是否是一个矩形</td>
</tr>
<tr>
<td>替换路径</td>
<td>set</td>
<td>用新的路径替换到当前路径所有内容</td>
</tr>
<tr>
<td>偏移路径</td>
<td>offset</td>
<td>对当前路径之前的操作进行偏移(不会影响之后的操作)</td>
</tr>
<tr>
<td>贝塞尔曲线</td>
<td>quadTo, cubicTo</td>
<td>分别为二次和三次贝塞尔曲线的方法</td>
</tr>
<tr>
<td>rXxx方法</td>
<td>rMoveTo, rLineTo, rQuadTo, rCubicTo</td>
<td><strong>不带r的方法是基于原点的坐标系(偏移量)， rXxx方法是基于当前点坐标系(偏移量)</strong></td>
</tr>
<tr>
<td>填充模式</td>
<td>setFillType, getFillType, isInverseFillType, toggleInverseFillType</td>
<td>设置,获取,判断和切换填充模式</td>
</tr>
<tr>
<td>提示方法</td>
<td>incReserve</td>
<td>提示Path还有多少个点等待加入<strong>(这个方法貌似会让Path优化存储结构)</strong></td>
</tr>
<tr>
<td>布尔操作(API19)</td>
<td>op</td>
<td>对两个Path进行布尔运算(即取交集、并集等操作)</td>
</tr>
<tr>
<td>计算边界</td>
<td>computeBounds</td>
<td>计算Path的边界</td>
</tr>
<tr>
<td>重置路径</td>
<td>reset, rewind</td>
<td>清除Path中的内容<br> <strong>reset不保留内部数据结构，但会保留FillType.</strong><br> <strong>rewind会保留内部的数据结构，但不保留FillType</strong></td>
</tr>
<tr>
<td>矩阵操作</td>
<td>transform</td>
<td>矩阵变换</td>
</tr>
</tbody>
</table>
<h1 id="Path含义"><a href="#Path含义" class="headerlink" title="Path含义"></a>Path含义</h1><p>Path封装了由直线和曲线(二次，三次贝塞尔曲线)构成的几何路径。你能用Canvas中的drawPath来把这条路径画出来(同样支持Paint的不同绘制模式)，也可以用于剪裁画布和根据路径绘制文字。我们有时会用Path来描述一个图像的轮廓，所以也会称为轮廓线(轮廓线仅是Path的一种使用方法，两者并不等价)</p>
<h1 id="直线与点的操作"><a href="#直线与点的操作" class="headerlink" title="直线与点的操作"></a>直线与点的操作</h1><h2 id="lineTo"><a href="#lineTo" class="headerlink" title="lineTo"></a>lineTo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建一条从原点到坐标(300,300)的直线</span></div><div class="line">mPath.lineTo(<span class="number">500</span>,<span class="number">500</span>);</div><div class="line"></div><div class="line"><span class="comment">//创建从(500,500)到(100,200)的一条直线</span></div><div class="line">mPath.lineTo(<span class="number">100</span>,<span class="number">200</span>);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-9fa8ff91af3e6ca6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="lineTo效果.png"></p>
<p>所以可知 lineTo 方法的连接的起点是由lineTo方法上一个Path操作决定的。</p>
<h2 id="moveTo"><a href="#moveTo" class="headerlink" title="moveTo"></a>moveTo</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这样改写的话是画一条从(500,500)到(100,200)的线</span></div><div class="line">mPath.moveTo(<span class="number">500</span>,<span class="number">500</span>);</div><div class="line">mPath.lineTo(<span class="number">100</span>,<span class="number">200</span>);</div></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-2a235e192504b31f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="moveTo效果.png"></p>
<p>所以可知 moveTo 方法的作用为将下次画路径起点移动到(x,y)</p>
<h2 id="setLastPoint"><a href="#setLastPoint" class="headerlink" title="setLastPoint"></a>setLastPoint</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mPath.lineTo(<span class="number">300</span>,<span class="number">300</span>);</div><div class="line">mPath.setLastPoint(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">mPath.lineTo(<span class="number">200</span>,<span class="number">400</span>);</div></pre></td></tr></table></figure>
<p>效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-0ac7b2790c36c336.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="setLastPoint效果.png"></p>
<p>所以可知 setLastPoint 的作用为改变上一次操作路径的结束坐标点。</p>
<p>因此我们可以总结出 moveTo 和 lineTo 的区别为：</p>
<ul>
<li>moveTo 影响上一次操作不影响上一次</li>
<li>setLastPoint上一次和下一次操作都影响</li>
</ul>
<h2 id="close"><a href="#close" class="headerlink" title="close"></a>close</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPath.lineTo(<span class="number">300</span>,<span class="number">300</span>);</div><div class="line">mPath.setLastPoint(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">mPath.lineTo(<span class="number">200</span>,<span class="number">400</span>);</div><div class="line">mPath.close();</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-76e5e3e3aa79e2fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="close效果.png"></p>
<p>观察可知 close 的效果为用线段连接起始点和终点，除非起始点等于终点。</p>
<h1 id="基本形状"><a href="#基本形状" class="headerlink" title="基本形状"></a>基本形状</h1><h2 id="addRect（矩形）"><a href="#addRect（矩形）" class="headerlink" title="addRect（矩形）"></a>addRect（矩形）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mPath.addRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">150</span>,<span class="number">150</span>,Direction.CW);</div><div class="line"></div><div class="line">mPath.addRect(<span class="number">50</span>,<span class="number">250</span>,<span class="number">150</span>,<span class="number">350</span>,Direction.CCW);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-a63df17a624ec167.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="矩形.png"></p>
<p>上下两个方法画出来的一模一样，那他们有什么区别呢？我们试着用一下刚学的 setLastPoint 看效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mPath.addRect(<span class="number">50</span>,<span class="number">50</span>,<span class="number">150</span>,<span class="number">150</span>,Direction.CW);</div><div class="line"><span class="comment">//改变最后一笔的位置</span></div><div class="line">mPath.setLastPoint(<span class="number">50</span>,<span class="number">100</span>);</div><div class="line"></div><div class="line">mPath.addRect(<span class="number">50</span>,<span class="number">250</span>,<span class="number">150</span>,<span class="number">350</span>,Direction.CCW);</div><div class="line">mPath.setLastPoint(<span class="number">150</span>,<span class="number">300</span>);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-0cde63a4201a51d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="矩形顺时逆时对比.png"></p>
<p>所以我们可以看出 Direction.CW 的最后一笔是左下角，Direction.CCW 的最后一笔是右上角，而且 Android 源码中给 Direction.CW 的注释为 clockwise(顺时针),Direction.CCW 的注释为 counter-clockwise(逆时针),通过这些我们可以很清楚的知道以上两种矩形画法的区别。</p>
<p>而矩形的另外一种画法 public void addRect(RectF rect, Direction dir) 和上面的方法其实一样，只是把坐标封装到了 RectF 对象中而已。</p>
<h2 id="addCircle（圆形）"><a href="#addCircle（圆形）" class="headerlink" title="addCircle（圆形）"></a>addCircle（圆形）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mPath.addCircle(<span class="number">210</span>,<span class="number">210</span>,<span class="number">200</span>, Path.Direction.CW);</div><div class="line"></div><div class="line">mPath.addCircle(<span class="number">800</span>,<span class="number">800</span>,<span class="number">200</span>, Path.Direction.CCW);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-f25c8134566cb3d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆形.png"></p>
<p>画圆非常简单，x，y 代表圆心坐标，radius 代表半径，dir 和矩形一样，代表顺时针或者逆时针。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPath.addCircle(<span class="number">210</span>,<span class="number">210</span>,<span class="number">200</span>, Path.Direction.CW);</div><div class="line">mPath.setLastPoint(<span class="number">210</span>,<span class="number">210</span>);</div><div class="line"></div><div class="line">mPath.addCircle(<span class="number">800</span>,<span class="number">800</span>,<span class="number">200</span>, Path.Direction.CCW);</div><div class="line">mPath.setLastPoint(<span class="number">800</span>,<span class="number">800</span>);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-b24fe1e1da6d757f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="addRoundRect（圆角矩形）"><a href="#addRoundRect（圆角矩形）" class="headerlink" title="addRoundRect（圆角矩形）"></a>addRoundRect（圆角矩形）</h2><p>圆角矩形主要有两种画法，一种是圆角弧度统一，第二种是定制每一个圆角的弧度。用法如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.addRoundRect(rect1,<span class="number">100</span>,<span class="number">100</span>, Path.Direction.CW);</div><div class="line"></div><div class="line">RectF rect2=<span class="keyword">new</span> RectF(<span class="number">100</span>,<span class="number">600</span>,<span class="number">800</span>,<span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="comment">/*必须传入8个数值，分四组，分别对应每个角所使用的椭圆的横轴半径和纵轴半径，</span></div><div class="line"> 如｛x1,y1,x2,y2,x3,y3,x4,y4｝，其中，x1,y1对应第一个角的（左上角）用来产</div><div class="line"> 生圆角的椭圆的横轴半径和纵轴半径，其它类推……*/</div><div class="line"><span class="keyword">float</span>[] radii=&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">200</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">200</span>&#125;;</div><div class="line">mPath.addRoundRect(rect2,radii,Path.Direction.CCW);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-7b6e69e14822fa9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆角矩形"></p>
<p>我标了一下每个圆角半径，很丑：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-571ad0c63463d64d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆角半径"></p>
<h2 id="addOval（椭圆）"><a href="#addOval（椭圆）" class="headerlink" title="addOval（椭圆）"></a>addOval（椭圆）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.addOval(rect, Path.Direction.CW);</div><div class="line"><span class="comment">//将矩形变为正方形看效果</span></div><div class="line">rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">600</span>, <span class="number">300</span>, <span class="number">800</span>);</div><div class="line">mPath.addOval(rect, Path.Direction.CW);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-8305a07ea17626a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="椭圆"></p>
<h2 id="addArc与arcTo（圆弧）"><a href="#addArc与arcTo（圆弧）" class="headerlink" title="addArc与arcTo（圆弧）"></a>addArc与arcTo（圆弧）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line"><span class="comment">//开始的角度</span></div><div class="line"><span class="keyword">float</span> startAngle=<span class="number">90</span>;</div><div class="line"><span class="comment">//扫过的角度</span></div><div class="line"><span class="keyword">float</span> sweepAngle=<span class="number">180</span>;</div><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.addArc(rect,startAngle,sweepAngle);</div></pre></td></tr></table></figure>
<p>效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-014416205f8d730e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="弧"></p>
<p>关于起始角度以及扫过的角度这些是怎么来的，我理解的是实际上我们是在指定矩形内画一个内切椭圆，通过指定角度在这个椭圆上截取一部分，这一部分就是我们所画的弧。示意图如下，不要嫌丑：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-2f1bf4d694f95e7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="弧"></p>
<p>知道了addArc的用法之后，我们来看一下arcTo这个方法，这个方法也是用来画圆弧的，但是与addArc有些不同:</p>
<ul>
<li>addArc    直接添加一段圆弧</li>
<li>arcTo      添加一段圆弧，如果圆弧的起点与上一次Path操作的终点不一样的话，就会在这两个点连成一条直线</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line"><span class="comment">//开始的角度</span></div><div class="line"><span class="keyword">float</span> startAngle=<span class="number">90</span>;</div><div class="line"><span class="comment">//扫过的角度</span></div><div class="line"><span class="keyword">float</span> sweepAngle=<span class="number">180</span>;</div><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.lineTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">mPath.arcTo(rect,startAngle,sweepAngle);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-785a72beeca6dac4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>可以看到，圆弧的起点并不是直线的终点，于是他们连接在了一起。如果你不想让他们连接怎么办？</p>
<pre><code>mPath.arcTo(rect,startAngle,sweepAngle,true);
</code></pre><p>arcTo 最后一个属性填 true 就可以了。效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-255b070700818d89.png" alt="image.png"></p>
<h2 id="addPath（添加Path）"><a href="#addPath（添加Path）" class="headerlink" title="addPath（添加Path）"></a>addPath（添加Path）</h2><p>先看最普通的 public void addPath (Path src)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Path circle=<span class="keyword">new</span> Path();</div><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.addRect(rect, Path.Direction.CW);</div><div class="line">circle.addCircle(<span class="number">450</span>,<span class="number">300</span>,<span class="number">200</span>, Path.Direction.CW);</div><div class="line">mPath.addPath(circle);</div></pre></td></tr></table></figure>
<p>它将两个path合并在了一起，效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-2d0a81593436197c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>addPath的第二个方法的 dx 和 dy 两个参数是什么意思呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPath.addPath(circle,<span class="number">350</span>,-<span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>其实它们是代表添加path后的位移值</p>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-4d28b8f8a6b14b86.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h1><h2 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Path circle=<span class="keyword">new</span> Path();</div><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.addRect(rect, Path.Direction.CW);</div><div class="line">circle.addCircle(<span class="number">450</span>,<span class="number">300</span>,<span class="number">200</span>, Path.Direction.CW);</div><div class="line">mPath.set(circle);</div></pre></td></tr></table></figure>
<p>这个方法就是将path之前的矩形变成圆形。</p>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-546c79bf325f031e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h2 id="offset"><a href="#offset" class="headerlink" title="offset()"></a>offset()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line">mPath = <span class="keyword">new</span> Path();</div><div class="line">mPath.addRect(rect, Path.Direction.CW);</div><div class="line">mPath.offset(<span class="number">150</span>,<span class="number">150</span>);</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-55ae6162b44b82ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>它的作用就是将path进行平移</p>
<p>offset() 还有一个参数 dst 是起什么作用呢？</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mPath=<span class="keyword">new</span> Path();</div><div class="line">mPath.addCircle(<span class="number">50</span>,<span class="number">50</span>,<span class="number">200</span>, Path.Direction.CW);</div><div class="line">Path temp=<span class="keyword">new</span> Path();</div><div class="line">RectF rect = <span class="keyword">new</span> RectF(<span class="number">100</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">500</span>);</div><div class="line">temp.addRect(rect, Path.Direction.CW);</div><div class="line"><span class="comment">//相当于用set方法将 temp set 给了mPath，覆盖 mPath 原有的图案</span></div><div class="line">temp.offset(<span class="number">150</span>,<span class="number">150</span>,mPath);</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-55ae6162b44b82ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>可以看到 mPath 之前画的圆已经被覆盖</p>
<h2 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h2><p>这个方法很简单，就是将path的所有操作都清空掉。</p>
<h1 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h1><h2 id="isConvex-（这个方法在API21之后才有）"><a href="#isConvex-（这个方法在API21之后才有）" class="headerlink" title="isConvex()（这个方法在API21之后才有）"></a>isConvex()（这个方法在API21之后才有）</h2><p>判断path是否为凸多边形，如果是就为true，反之为false。</p>
<p>要理解这个方法首先，我们要知道什么是凸多边形。</p>
<p>凸多边形的概念:</p>
<ol>
<li>每个内角小于180度</li>
<li>任何两个顶点间的线段位于多边形的内部或边界上。</li>
</ol>
<p>也就是说矩形，三角形，直线都是凸多边形，但是五角星那种形状就不是。现在我们用代码验证一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mPath=<span class="keyword">new</span> Path();</div><div class="line">mPath.moveTo(<span class="number">100</span>,<span class="number">100</span>);</div><div class="line">mPath.lineTo(<span class="number">200</span>,<span class="number">200</span>);</div><div class="line">mPath.lineTo(<span class="number">100</span>,<span class="number">400</span>);</div><div class="line">mPath.lineTo(<span class="number">300</span>,<span class="number">50</span>);</div><div class="line">mPath.close();</div><div class="line">System.out.println(mPath.isConvex());</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-b99b4c9a0f651743.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>很明显，这不是一个凸多边形，查看输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I/System.out: <span class="keyword">false</span></div></pre></td></tr></table></figure></p>
<h2 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty"></a>isEmpty</h2><p>这个方法依然很简单，就是判断 path 中是否包含内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPath=<span class="keyword">new</span> Path();</div><div class="line">System.out.println(mPath.isEmpty());</div><div class="line">mPath.lineTo(<span class="number">300</span>,<span class="number">50</span>);</div><div class="line">System.out.println(mPath.isEmpty());</div></pre></td></tr></table></figure>
<p>查看输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: <span class="keyword">true</span></div><div class="line">I/System.out: <span class="keyword">false</span></div></pre></td></tr></table></figure></p>
<h2 id="isRect"><a href="#isRect" class="headerlink" title="isRect"></a>isRect</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPath=<span class="keyword">new</span> Path();</div><div class="line">RectF rect=<span class="keyword">new</span> RectF();</div><div class="line">mPath.addRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">50</span>,<span class="number">50</span>,Path.Direction.CW);</div><div class="line">System.out.println(mPath.isRect(rect));</div><div class="line">System.out.println(rect);</div></pre></td></tr></table></figure>
<p>  判断path是否是一个矩形，如果是一个矩形的话，将矩形的信息存到参数rect中。</p>
<p>  输出如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: <span class="keyword">true</span></div><div class="line">I/System.out: RectF(<span class="number">50.0</span>, <span class="number">50.0</span>, <span class="number">100.0</span>, <span class="number">100.0</span>)</div></pre></td></tr></table></figure>
<h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p>如果想练习一下 Path知识，可以看一下下面的 blog：</p>
<p><a href="https://github.com/jutao/AndroidNode/blob/master/2017/2017.3/Path%E5%AE%9E%E6%88%98%E4%B9%8B%E9%9B%B7%E8%BE%BE%E5%9B%BE.md" target="_blank" rel="external">Path实战之雷达图</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;path-常用方法一览&quot;&gt;&lt;a href=&quot;#path-常用方法一览&quot; class=&quot;headerlink&quot; title=&quot;path 常用方法一览&quot;&gt;&lt;/a&gt;path 常用方法一览&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;为了兼容性(&lt;em&gt;偷懒&lt;/em&gt;) 本表
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Path" scheme="http://yoursite.com/tags/Path/"/>
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Path学习笔记之Bezier</title>
<<<<<<< HEAD
    <link href="http://yoursite.com/2017/04/16/Path%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BBezier/"/>
    <id>http://yoursite.com/2017/04/16/Path学习笔记之Bezier/</id>
    <published>2017-04-16T03:28:56.397Z</published>
    <updated>2017-05-14T12:36:54.360Z</updated>
=======
    <link href="http://yoursite.com/2017/04/17/Path%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BBezier/"/>
    <id>http://yoursite.com/2017/04/17/Path学习笔记之Bezier/</id>
    <published>2017-04-17T09:19:40.603Z</published>
    <updated>2017-04-21T08:27:36.258Z</updated>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    
    <content type="html"><![CDATA[<h1 id="贝塞尔曲线能干什么？"><a href="#贝塞尔曲线能干什么？" class="headerlink" title="贝塞尔曲线能干什么？"></a>贝塞尔曲线能干什么？</h1><p>贝塞尔曲线的运用是十分广泛的，可以说<strong>贝塞尔曲线奠定了计算机绘图的基础(<em>因为它可以将任何复杂的图形用精确的数学语言进行描述</em>)</strong>，在你不经意间就已经使用过它了。</p>
<p>你会使用Photoshop的话，你可能会注意到里面有一个<strong>钢笔工具</strong>，这个钢笔工具核心就是贝塞尔曲线。</p>
<p>你说你不会PS？ 没关系，你如果看过前面的文章或者用过2D绘图，肯定绘制过圆，圆弧，圆角矩形等这些东西。这里面的圆弧部分全部都是贝塞尔曲线的运用。</p>
<p>贝塞尔曲线作用十分广泛，简单举几个的栗子:</p>
<blockquote>
<ul>
<li>QQ小红点拖拽效果</li>
<li>一些炫酷的下拉刷新控件</li>
<li>阅读软件的翻书效果</li>
<li>一些平滑的折线图的制作</li>
<li>很多炫酷的动画效果</li>
</ul>
</blockquote>
<h1 id="贝塞尔曲线的原理"><a href="#贝塞尔曲线的原理" class="headerlink" title="贝塞尔曲线的原理"></a>贝塞尔曲线的原理</h1><p>贝塞尔曲线是用一系列点来控制曲线状态的，我将这些点简单分为两类：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据点</td>
<td>确定曲线的起始和结束位置</td>
</tr>
<tr>
<td>控制点</td>
<td>确定曲线的弯曲程度</td>
</tr>
</tbody>
</table>
<blockquote>
<p>此处暂时仅作了解概念，接下来就会讲解其中详细的含义。</p>
</blockquote>
<h2 id="一阶曲线原理"><a href="#一阶曲线原理" class="headerlink" title="一阶曲线原理"></a>一阶曲线原理</h2><p>一阶曲线是没有控制点的，仅有两个数据点(A 和 B)，最终效果一个线段。</p>
<p><img src="http://ww1.sinaimg.cn/large/005Xtdi2jw1f35of045w8j308c0dwq2z.jpg" alt=""></p>
<blockquote>
<p><strong>上图表示的是一阶曲线生成过程中的某一个阶段，动态过程可以参照下图(本文中贝塞尔曲线相关的动态演示图片来自维基百科)。</strong></p>
</blockquote>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/0/00/B%C3%A9zier_1_big.gif" alt=""></p>
<blockquote>
<p><strong>PS：一阶曲线其实就是 Path 的 lineTo 方法。</strong></p>
</blockquote>
<h2 id="二阶曲线原理"><a href="#二阶曲线原理" class="headerlink" title="二阶曲线原理"></a>二阶曲线原理</h2><p>二阶曲线由两个数据点(A 和 C)，一个控制点(B)来描述曲线状态，大致如下：</p>
<p><img src="http://ww3.sinaimg.cn/large/005Xtdi2jw1f35p4913k7j308c0dw74d.jpg" alt=""></p>
<p>上图中红色曲线部分就是传说中的二阶贝塞尔曲线，那么这条红色曲线是如何生成的呢？接下来我们就以其中的一个状态分析一下：</p>
<p><img src="http://ww4.sinaimg.cn/large/005Xtdi2jw1f361bjqj2vj308c0dwwem.jpg" alt=""></p>
<p>连接AB BC，并在AB上取点D，BC上取点E，使其满足条件：<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=%5Cfrac%7BAD%7D%7BAB%7D%20%3D%20%5Cfrac%7BBE%7D%7BBC%7D" style="border:none;"></p>
<p><img src="http://ww2.sinaimg.cn/large/005Xtdi2jw1f361oje6h1j308c0dwdg0.jpg" alt=""></p>
<p>连接DE，取点F，使得:<br><img src="http://chart.googleapis.com/chart?cht=tx&chl=%5Cfrac%7BAD%7D%7BAB%7D%20%3D%20%5Cfrac%7BBE%7D%7BBC%7D%20%3D%20%5Cfrac%7BDF%7D%7BDE%7D" style="border:none;"></p>
<p>这样获取到的点F就是贝塞尔曲线上的一个点，动态过程如下：</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/3d/B%C3%A9zier_2_big.gif" alt=""></p>
<blockquote>
<p><strong>PS: 二阶曲线对应的方法是quadTo</strong></p>
</blockquote>
<h2 id="三阶曲线原理"><a href="#三阶曲线原理" class="headerlink" title="三阶曲线原理"></a>三阶曲线原理</h2><p>三阶曲线由两个数据点(A 和 D)，两个控制点(B 和 C)来描述曲线状态，如下：</p>
<p><img src="http://ww2.sinaimg.cn/large/005Xtdi2gw1f36myeqcu5j308c0dwdg2.jpg" alt=""></p>
<p>三阶曲线计算过程与二阶类似，具体可以见下图动态效果：</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/d/db/B%C3%A9zier_3_big.gif" alt=""></p>
<blockquote>
<p><strong>PS: 三阶曲线对应的方法是cubicTo</strong></p>
</blockquote>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote>
<p><strong> <a href="https://github.com/GcsSloop/AndroidNote/blob/master/QuickChart/Bezier.md" target="_blank" rel="external">贝塞尔曲线速查表</a></strong></p>
<p><strong> 强烈推荐<a href="http://bezier.method.ac/" target="_blank" rel="external">点击这里</a>练习贝塞尔曲线，可以加深对贝塞尔曲线的理解程度。</strong></p>
</blockquote>
<h1 id="贝塞尔曲线基本用法"><a href="#贝塞尔曲线基本用法" class="headerlink" title="贝塞尔曲线基本用法"></a>贝塞尔曲线基本用法</h1><h2 id="一阶曲线"><a href="#一阶曲线" class="headerlink" title="一阶曲线"></a>一阶曲线</h2><p>一阶曲线是一条线段，非常简单，可以参见上一篇文章<br><a href="https://github.com/jutao/AndroidNode/blob/master/2017/2017.3/Path%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C.md" target="_blank" rel="external">Path之基本操作</a>，此处就不详细讲解了。</p>
<h2 id="二阶曲线"><a href="#二阶曲线" class="headerlink" title="二阶曲线"></a>二阶曲线</h2><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bezier</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> PointF start,end,control;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerX,centerY;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bezier</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bezier</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bezier</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        start=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        end=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        control=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">        mPaint=<span class="keyword">new</span> Paint();</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">8</span>);</div><div class="line">        mPaint.setTextSize(<span class="number">60</span>);</div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line"></div><div class="line">        centerX=w/<span class="number">2</span>;</div><div class="line">        centerY=h/<span class="number">2</span>;</div><div class="line"></div><div class="line">        start.x=centerX-<span class="number">200</span>;</div><div class="line">        start.y=centerY;</div><div class="line"></div><div class="line">        end.x=centerX+<span class="number">200</span>;</div><div class="line">        end.y=centerY;</div><div class="line"></div><div class="line">        control.x=centerX;</div><div class="line">        control.y=centerY-<span class="number">100</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        drawPoint(canvas);</div><div class="line">        drawAuxiliaryLine(canvas);</div><div class="line">        drawBezierPath(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制数据点和控制点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPoint</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        canvas.drawCircle(start.x,start.y,<span class="number">4</span>,mPaint);</div><div class="line">        canvas.drawCircle(end.x,end.y,<span class="number">4</span>,mPaint);</div><div class="line">        canvas.drawCircle(control.x,control.y,<span class="number">4</span>,mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制辅助线</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawAuxiliaryLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        mPaint.setStrokeWidth(<span class="number">4</span>);</div><div class="line">        canvas.drawLine(start.x,start.y,control.x,control.y,mPaint);</div><div class="line">        canvas.drawLine(end.x,end.y,control.x,control.y,mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制二阶曲线</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBezierPath</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">8</span>);</div><div class="line">        Path path=<span class="keyword">new</span> Path();</div><div class="line">        path.moveTo(start.x,start.y);</div><div class="line">        path.quadTo(control.x,control.y,end.x,end.y);</div><div class="line">        canvas.drawPath(path,mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        control.x=event.getX();</div><div class="line">        control.y=event.getY();</div><div class="line">        postInvalidate();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-a7f7504b98e1a36b.gif?imageMogr2/auto-orient/strip" alt="Bezier.gif"></p>
<h2 id="三阶曲线"><a href="#三阶曲线" class="headerlink" title="三阶曲线"></a>三阶曲线</h2><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bezier2</span> <span class="keyword">extends</span> <span class="title">View</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Paint mPaint;</div><div class="line">    <span class="keyword">private</span> PointF start,end,control1,control2;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> centerX,centerY;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isControl1=<span class="keyword">true</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bezier2</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context,<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bezier2</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bezier2</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        start=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        end=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        control1=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">        control2=<span class="keyword">new</span> PointF(<span class="number">0</span>,<span class="number">0</span>);</div><div class="line"></div><div class="line">        mPaint=<span class="keyword">new</span> Paint();</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">8</span>);</div><div class="line">        mPaint.setTextSize(<span class="number">60</span>);</div><div class="line">        mPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line"></div><div class="line">        centerX=w/<span class="number">2</span>;</div><div class="line">        centerY=h/<span class="number">2</span>;</div><div class="line"></div><div class="line">        start.x=centerX-<span class="number">300</span>;</div><div class="line">        start.y=centerY;</div><div class="line"></div><div class="line">        end.x=centerX+<span class="number">300</span>;</div><div class="line">        end.y=centerY;</div><div class="line"></div><div class="line">        control1.x=centerX-<span class="number">100</span>;</div><div class="line">        control1.y=centerY-<span class="number">200</span>;</div><div class="line"></div><div class="line">        control2.x=centerX+<span class="number">100</span>;</div><div class="line">        control2.y=centerY-<span class="number">200</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        drawPoint(canvas);</div><div class="line">        drawAuxiliaryLine(canvas);</div><div class="line">        drawBezierPath(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制数据点和控制点</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPoint</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        canvas.drawCircle(start.x,start.y,<span class="number">4</span>,mPaint);</div><div class="line">        canvas.drawCircle(end.x,end.y,<span class="number">4</span>,mPaint);</div><div class="line">        canvas.drawCircle(control1.x,control1.y,<span class="number">4</span>,mPaint);</div><div class="line">        canvas.drawCircle(control2.x,control2.y,<span class="number">4</span>,mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制辅助线</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawAuxiliaryLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        mPaint.setStrokeWidth(<span class="number">4</span>);</div><div class="line">        canvas.drawLine(start.x,start.y,control1.x,control1.y,mPaint);</div><div class="line">        canvas.drawLine(end.x,end.y,control2.x,control2.y,mPaint);</div><div class="line">        canvas.drawLine(control1.x,control1.y,control2.x,control2.y,mPaint);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制三阶曲线</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBezierPath</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStrokeWidth(<span class="number">8</span>);</div><div class="line">        Path path=<span class="keyword">new</span> Path();</div><div class="line">        path.moveTo(start.x,start.y);</div><div class="line">        path.cubicTo(control1.x,control1.y,control2.x,control2.y,end.x,end.y);</div><div class="line">        canvas.drawPath(path,mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(isControl1)&#123;</div><div class="line">            control1.x=event.getX();</div><div class="line">            control1.y=event.getY();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            control2.x=event.getX();</div><div class="line">            control2.y=event.getY();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        postInvalidate();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isControl1</span><span class="params">(<span class="keyword">boolean</span> control1)</span> </span>&#123;</div><div class="line">        isControl1 = control1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>主要的区别就是多了一个控制点，效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-0e9407c333224757.gif?imageMogr2/auto-orient/strip" alt="Bezier.gif"></p>
<h2 id="降阶与升阶"><a href="#降阶与升阶" class="headerlink" title="降阶与升阶"></a>降阶与升阶</h2><blockquote>
<p>三阶曲线相比于二阶曲线可以制作更加复杂的形状，但是对于高阶的曲线，用低阶的曲线组合也可达到相同的效果，就是传说中的<strong>降阶</strong>。因此我们对贝塞尔曲线的封装方法一般最高只到三阶曲线。</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>释义</th>
<th>变化</th>
</tr>
</thead>
<tbody>
<tr>
<td>降阶</td>
<td>在保持曲线形状与方向不变的情况下，减少控制点数量，即降低曲线阶数</td>
<td>方法变得简单，数据点变多，控制点可能减少，灵活性变弱</td>
</tr>
<tr>
<td>升阶</td>
<td>在保持曲线形状与方向不变的情况下，增加控制点数量，即升高曲线阶数</td>
<td>方法更加复杂，数据点不变，控制点增加，灵活性变强</td>
</tr>
</tbody>
</table>
<h1 id="贝塞尔曲线使用实例"><a href="#贝塞尔曲线使用实例" class="headerlink" title="贝塞尔曲线使用实例"></a>贝塞尔曲线使用实例</h1><p>在制作这个实例之前，首先要明确一个内容，就是在什么情况下需要使用贝塞尔曲线？</p>
<blockquote>
<p>需要绘制不规则图形时？ 当然不是！目前来说，使用贝塞尔曲线主要有以下几个方面(摘抄)</p>
</blockquote>
<table>
<thead>
<tr>
<th>序号</th>
<th>内容</th>
<th>用例</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>事先不知道曲线状态，需要实时计算时</td>
<td>天气预报气温变化的平滑折线图</td>
</tr>
<tr>
<td>2</td>
<td>显示状态会根据用户操作改变时</td>
<td>QQ小红点，仿真翻书效果</td>
</tr>
<tr>
<td>3</td>
<td>一些比较复杂的运动状态(配合PathMeasure使用)</td>
<td>复杂运动状态的动画效果</td>
</tr>
</tbody>
</table>
<p>至于只需要一个静态的曲线图形的情况，用图片岂不是更好，大量的计算会很不划算。</p>
<p>如果是显示SVG矢量图的话，已经有相关的解析工具了(内部依旧运用的有贝塞尔曲线)，不需要手动计算。</p>
<p><strong>贝塞尔曲线的主要优点是可以实时控制曲线状态，并可以通过改变控制点的状态实时让曲线进行平滑的状态变化。</strong></p>
<p>我们要实现的效果是使一个圆渐变为心形</p>
<p>代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BezierHeartView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// 一个常量，用来计算绘制圆形贝塞尔曲线控制点的位置</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> C = <span class="number">0.551915024494f</span>;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mCenterX;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> mCenterY;</div><div class="line">  <span class="comment">//圆的半径</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mCircleRadius = <span class="number">200</span>;</div><div class="line">  <span class="comment">// 圆形的控制点与数据点的差值</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mDifference = mCircleRadius * C;</div><div class="line">  <span class="keyword">private</span> Paint mPaint;</div><div class="line"></div><div class="line">  <span class="comment">// 顺时针记录绘制圆形的四个数据点</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span>[] mData = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">8</span>];</div><div class="line"></div><div class="line">  <span class="comment">// 顺时针记录绘制圆形的八个控制点</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span>[] mCtrl = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">16</span>];</div><div class="line">  <span class="keyword">private</span> Paint mFuZhuPaint;</div><div class="line"></div><div class="line">  <span class="comment">// 变化总时长</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mDuration = <span class="number">1000</span>;</div><div class="line">  <span class="comment">// 当前已进行时长</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mCurrent = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 将时长总共划分多少份</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mCount = <span class="number">100</span>;</div><div class="line">  <span class="comment">// 每一份的时长</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">float</span> mPiece = mDuration / mCount;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BezierHeartView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BezierHeartView</span><span class="params">(Context context, @Nullable AttributeSet attrs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">BezierHeartView</span><span class="params">(Context context, @Nullable AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    init();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    mPaint = <span class="keyword">new</span> Paint();</div><div class="line">    mPaint.setColor(Color.BLACK);</div><div class="line">    mPaint.setStrokeWidth(<span class="number">8</span>);</div><div class="line">    mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">    mPaint.setTextSize(<span class="number">60</span>);</div><div class="line"></div><div class="line">    mFuZhuPaint = <span class="keyword">new</span> Paint();</div><div class="line">    mFuZhuPaint.setStrokeWidth(<span class="number">5</span>);</div><div class="line">    mFuZhuPaint.setColor(Color.RED);</div><div class="line">    mFuZhuPaint.setStyle(Paint.Style.STROKE);</div><div class="line"></div><div class="line">    <span class="comment">//初始化数据点</span></div><div class="line">    mData[<span class="number">0</span>] = <span class="number">0</span>;</div><div class="line">    mData[<span class="number">1</span>] = mCircleRadius;</div><div class="line"></div><div class="line">    mData[<span class="number">2</span>] = mCircleRadius;</div><div class="line">    mData[<span class="number">3</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    mData[<span class="number">4</span>] = <span class="number">0</span>;</div><div class="line">    mData[<span class="number">5</span>] = -mCircleRadius;</div><div class="line"></div><div class="line">    mData[<span class="number">6</span>] = -mCircleRadius;</div><div class="line">    mData[<span class="number">7</span>] = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">//初始化控制点</span></div><div class="line">    mCtrl[<span class="number">0</span>] = mData[<span class="number">0</span>] + mDifference;</div><div class="line">    mCtrl[<span class="number">1</span>] = mData[<span class="number">1</span>];</div><div class="line"></div><div class="line">    mCtrl[<span class="number">2</span>] = mData[<span class="number">2</span>];</div><div class="line">    mCtrl[<span class="number">3</span>] = mData[<span class="number">3</span>] + mDifference;</div><div class="line"></div><div class="line">    mCtrl[<span class="number">4</span>] = mData[<span class="number">2</span>];</div><div class="line">    mCtrl[<span class="number">5</span>] = mData[<span class="number">3</span>] - mDifference;</div><div class="line"></div><div class="line">    mCtrl[<span class="number">6</span>] = mData[<span class="number">4</span>] + mDifference;</div><div class="line">    mCtrl[<span class="number">7</span>] = mData[<span class="number">5</span>];</div><div class="line"></div><div class="line">    mCtrl[<span class="number">8</span>] = mData[<span class="number">4</span>] - mDifference;</div><div class="line">    mCtrl[<span class="number">9</span>] = mData[<span class="number">5</span>];</div><div class="line"></div><div class="line">    mCtrl[<span class="number">10</span>] = mData[<span class="number">6</span>];</div><div class="line">    mCtrl[<span class="number">11</span>] = mData[<span class="number">7</span>] - mDifference;</div><div class="line"></div><div class="line">    mCtrl[<span class="number">12</span>] = mData[<span class="number">6</span>];</div><div class="line">    mCtrl[<span class="number">13</span>] = mData[<span class="number">7</span>] + mDifference;</div><div class="line"></div><div class="line">    mCtrl[<span class="number">14</span>] = mData[<span class="number">0</span>] - mDifference;</div><div class="line">    mCtrl[<span class="number">15</span>] = mData[<span class="number">1</span>];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">    mCenterX = w / <span class="number">2</span>;</div><div class="line">    mCenterY = h / <span class="number">2</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">    <span class="comment">// 绘制坐标系</span></div><div class="line">    drawCoordinateSystem(canvas);</div><div class="line">    <span class="comment">//绘制辅助线</span></div><div class="line">    drawAuxiliaryLine(canvas);</div><div class="line">    <span class="comment">// 绘制贝塞尔曲线</span></div><div class="line">    drawBezier(canvas);</div><div class="line">    <span class="comment">//幻化为心</span></div><div class="line">    changeBezier(canvas);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeBezier</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    mCurrent+=mPiece;</div><div class="line">    <span class="keyword">if</span>(mCurrent&lt;=mDuration)&#123;</div><div class="line">      mData[<span class="number">1</span>]+=<span class="number">120</span>/mCount;</div><div class="line">      mData[<span class="number">5</span>]+=<span class="number">150</span>/mCount;</div><div class="line"></div><div class="line">      mCtrl[<span class="number">0</span>]-=<span class="number">80</span>/mCount;</div><div class="line">      mCtrl[<span class="number">14</span>]+=<span class="number">80</span>/mCount;</div><div class="line"></div><div class="line">      mCtrl[<span class="number">4</span>]-=<span class="number">20</span>/mCount;</div><div class="line">      mCtrl[<span class="number">10</span>]+=<span class="number">20</span>/mCount;</div><div class="line"></div><div class="line">      postInvalidateDelayed((<span class="keyword">long</span>) mPiece);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawBezier</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    mPaint.setStrokeWidth(<span class="number">8</span>);</div><div class="line">    mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">    Path path = <span class="keyword">new</span> Path();</div><div class="line">    path.moveTo(mData[<span class="number">0</span>], mData[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, j = <span class="number">0</span>; j &lt; mCtrl.length; i += <span class="number">2</span>, j += <span class="number">4</span>) &#123;</div><div class="line">      path.cubicTo(mCtrl[j], mCtrl[j + <span class="number">1</span>], mCtrl[j + <span class="number">2</span>], mCtrl[j + <span class="number">3</span>], mData[i % mData.length],</div><div class="line">          mData[(i + <span class="number">1</span>) % mData.length]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    canvas.drawPath(path, mPaint);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawAuxiliaryLine</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    mPaint.setColor(Color.GRAY);</div><div class="line">    mPaint.setStrokeWidth(<span class="number">2</span>);</div><div class="line">    mPaint.setStyle(Paint.Style.FILL);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; mData.length; i += <span class="number">2</span>, j += <span class="number">4</span>) &#123;</div><div class="line">      canvas.drawCircle(mData[i], mData[i + <span class="number">1</span>], <span class="number">4</span>, mPaint);</div><div class="line">      canvas.drawCircle(mCtrl[j], mCtrl[j + <span class="number">1</span>], <span class="number">4</span>, mPaint);</div><div class="line">      canvas.drawCircle(mCtrl[j + <span class="number">2</span>], mCtrl[j + <span class="number">3</span>], <span class="number">4</span>, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; mCtrl.length; i += <span class="number">2</span>, j += <span class="number">4</span>) &#123;</div><div class="line">      canvas.drawLine(mData[i], mData[i + <span class="number">1</span>], mCtrl[j], mCtrl[j + <span class="number">1</span>], mPaint);</div><div class="line">      canvas.drawLine(mCtrl[j], mCtrl[j + <span class="number">1</span>], mCtrl[j + <span class="number">2</span>], mCtrl[j + <span class="number">3</span>], mPaint);</div><div class="line">      canvas.drawLine(mCtrl[j + <span class="number">2</span>], mCtrl[j + <span class="number">3</span>], mData[(i + <span class="number">2</span>) % mData.length],</div><div class="line">          mData[(i + <span class="number">3</span>) % mData.length], mPaint);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCoordinateSystem</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    canvas.drawLine(<span class="number">0</span>, mCenterY, mCenterX * <span class="number">2</span>, mCenterY, mFuZhuPaint);</div><div class="line">    canvas.drawLine(mCenterX, <span class="number">0</span>, mCenterX, mCenterY * <span class="number">2</span>, mFuZhuPaint);</div><div class="line">    canvas.translate(mCenterX, mCenterY);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>预览效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-6126e83d6fb071f6.gif?imageMogr2/auto-orient/strip" alt="贝塞尔.gif"></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B06%5DPath_Bezier.md" target="_blank" rel="external">Path之贝塞尔曲线</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;贝塞尔曲线能干什么？&quot;&gt;&lt;a href=&quot;#贝塞尔曲线能干什么？&quot; class=&quot;headerlink&quot; title=&quot;贝塞尔曲线能干什么？&quot;&gt;&lt;/a&gt;贝塞尔曲线能干什么？&lt;/h1&gt;&lt;p&gt;贝塞尔曲线的运用是十分广泛的，可以说&lt;strong&gt;贝塞尔曲线奠定了计算机绘
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Path" scheme="http://yoursite.com/tags/Path/"/>
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
<<<<<<< HEAD
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
=======
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-策略模式</title>
<<<<<<< HEAD
    <link href="http://yoursite.com/2017/04/16/%5BAndroid%5D%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/16/[Android] 设计模式-策略模式/</id>
    <published>2017-04-15T16:12:16.087Z</published>
    <updated>2017-04-19T14:35:41.044Z</updated>
=======
    <link href="http://yoursite.com/2017/04/14/%5BAndroid%5D%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/04/14/[Android] 设计模式-策略模式/</id>
    <published>2017-04-14T03:48:01.514Z</published>
    <updated>2017-07-12T05:33:33.153Z</updated>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    
    <content type="html"><![CDATA[<h1 id="最简单的商场收银软件"><a href="#最简单的商场收银软件" class="headerlink" title="最简单的商场收银软件"></a>最简单的商场收银软件</h1><p>如果要做一款收银软件，营业员根据客户所购买商品单价和数量向客户收费，这非常容易。</p>
<p>Demo 如下：</p>
<p><img src="http://i.imgur.com/XBz9iW5.png" alt=""></p>
<a id="more"></a>
<p>点击确定后的代码逻辑如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doEnter</span><span class="params">()</span> </span>&#123;</div><div class="line">String stringTotal = tv_total.getText().toString().trim();</div><div class="line"><span class="keyword">double</span> total;</div><div class="line"><span class="keyword">if</span> (stringTotal != <span class="keyword">null</span> &amp;&amp; stringTotal != <span class="string">""</span>) &#123;</div><div class="line">  total = Double.valueOf(stringTotal);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  total = <span class="number">0.0</span>d;</div><div class="line">&#125;</div><div class="line"></div><div class="line">String stringDJ = et_dj.getText().toString().trim();</div><div class="line">String stringSL = et_sl.getText().toString().trim();</div><div class="line"><span class="keyword">if</span> (stringDJ != <span class="keyword">null</span> &amp;&amp; !stringDJ.equals(<span class="string">""</span>) &amp;&amp; stringSL != <span class="keyword">null</span> &amp;&amp; !stringSL.equals(<span class="string">""</span>)) &#123;</div><div class="line">  Log.d(<span class="string">"TAG"</span>, <span class="string">"123"</span> + stringDJ + <span class="string">"123"</span>);</div><div class="line">  <span class="keyword">double</span> price = Double.valueOf(stringDJ);</div><div class="line">  <span class="keyword">int</span> number = Integer.valueOf(stringSL);</div><div class="line">  <span class="keyword">double</span> totalPrice = price * number;</div><div class="line">  total = total + totalPrice;</div><div class="line">  tv_total.setText(String.valueOf(total));</div><div class="line">  String text = tv_detail.getText().toString()</div><div class="line">      + <span class="string">"单价： "</span></div><div class="line">      + price</div><div class="line">      + <span class="string">" 数量："</span></div><div class="line">      + number</div><div class="line">      + <span class="string">" 合计:"</span></div><div class="line">      + totalPrice</div><div class="line">      + <span class="string">"\n"</span>;</div><div class="line">  tv_detail.setText(text);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="增加打折功能后的收银软件"><a href="#增加打折功能后的收银软件" class="headerlink" title="增加打折功能后的收银软件"></a>增加打折功能后的收银软件</h1><p>可是如果商场搞促销，需要打折该怎么办，不可能每次都要修改代码然后重新安装，用下拉框可能会比较方便。<br>Demo 如下：</p>
<p><img src="http://i.imgur.com/sLqCANA.png" alt=""></p>
<p>添加的代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">switch</span> (sp_jsfs.getSelectedItemPosition())&#123;</div><div class="line">  <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">    totalPrice*=<span class="number">0.8</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">    totalPrice*=<span class="number">0.7</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">    totalPrice*=<span class="number">0.5</span>;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样看似解决了问题，但是需求不断增加，比如满300返50之类，这样的代码未免显得太过重复。接下来我们试着用简单工厂模式来解决问题试试。</p>
<h1 id="简单工厂实现"><a href="#简单工厂实现" class="headerlink" title="简单工厂实现"></a>简单工厂实现</h1><blockquote>
<p>面向对象的编程，并不是类越多越好，类的划分是为了封装，但分类的基础是抽象，具有相同属性和功能的对象抽象集合才是类。</p>
</blockquote>
<p>打一折和九折只是形式的不同，抽象分析出来，所有打折算法都是一样的，所以打折算法应该是一个类。返现算法也是一个类。</p>
<p>MainActivity 改动如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CashSuper cSuper= CashFactor.createCashAccept(sp_jsfs.getSelectedItemPosition());</div><div class="line">totalPrice=cSuper.acceptCash(totalPrice);</div></pre></td></tr></table></figure>
<p>详细代码可以去最后上传的Demo里看</p>
<p>简单工厂模式虽然也能解决问题，但只是解决对象创建的问题，而且由于工厂本身包括了所有的收费方式，商场是可能经常性地更改打折和返利额度，每次维护或扩展收费方式都要改动这个工厂，以至代码要重新编译部署，这是很糟糕的，所以我们需要另一种新的设计模式–策略模式。</p>
<h1 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h1><h2 id="什么是策略模式"><a href="#什么是策略模式" class="headerlink" title="什么是策略模式"></a>什么是策略模式</h2><blockquote>
<p>策略模式就是定义一系列算法，把他们独立封装起来，并且这些算法之间可以相互替换。策略模式主要是管理一堆有共性的算法，客户端可以根据需要，很快切换这些算法，并且保持可扩展性。<br>策略模式的本质：分离算法，选择实现。</p>
</blockquote>
<h2 id="如何运用到收银系统中"><a href="#如何运用到收银系统中" class="headerlink" title="如何运用到收银系统中"></a>如何运用到收银系统中</h2><p>商场收银如何促销，用打折还是返利，其实都是一些算法，用工厂来生成算法对象，这没有错，但算法本身只是一种策略，最重要的是这些算法是随时都可能互相替换的，这是变化点，而封装变化点是我们面向对象的一种很重要的思维方式。</p>
<p>以下是策略模式 UML 图</p>
<p><img src="http://i.imgur.com/WxFL8fa.png" alt=""></p>
<p>接下来我们将策略模式运用到收银系统中</p>
<p>首先创建一个 CashContext 代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CashContext</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> CashSuper cs;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">CashContext</span><span class="params">(CashSuper cs)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.cs = cs;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">GetResule</span><span class="params">(<span class="keyword">double</span> money)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> cs.acceptCash(money);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后改动 MainActivity 如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">CashContext cc = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">switch</span> (sp_jsfs.getSelectedItemPosition()) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashNormal());</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashReturn(<span class="number">300</span>, <span class="number">100</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashRebate(<span class="number">0.8</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashRebate(<span class="number">0.7</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">        cc = <span class="keyword">new</span> CashContext(<span class="keyword">new</span> CashRebate(<span class="number">0.5</span>));</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    totalPrice = cc.GetResule(totalPrice);</div></pre></td></tr></table></figure>
<p>这时候，你会发现，我们又像原来一样在 MainActivity 中写了判断，可以试着将之前的工厂模式和策略模式结合吗？</p>
<h2 id="策略模式与简单工厂结合"><a href="#策略模式与简单工厂结合" class="headerlink" title="策略模式与简单工厂结合"></a>策略模式与简单工厂结合</h2><p>将 CashContext 类的构造方法修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">CashContext</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type) &#123;</div><div class="line">      <span class="keyword">case</span> <span class="number">0</span>:</div><div class="line">        cs=<span class="keyword">new</span> CashNormal();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">        cs=<span class="keyword">new</span> CashReturn(<span class="number">300</span>,<span class="number">100</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">        cs = <span class="keyword">new</span> CashRebate(<span class="number">0.8</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">        cs = <span class="keyword">new</span> CashRebate(<span class="number">0.7</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">case</span> <span class="number">4</span>:</div><div class="line">        cs = <span class="keyword">new</span> CashRebate(<span class="number">0.5</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>MainActivity 代码修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CashContext cc = <span class="keyword">new</span> CashContext(sp_jsfs.getSelectedItemPosition());</div><div class="line">      totalPrice = cc.GetResule(totalPrice);</div><div class="line">      total = total + totalPrice;</div></pre></td></tr></table></figure>
<p>这样客户端只需要认识一个类 CashContext就可以了，耦合度进一步降低了。<br>不过这样一旦需求变化依旧需要修改 switch ，其实想要更好的实现可以用反射方法，具体用法下次再做讨论。</p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://github.com/jutao/strategymodel" target="_blank" rel="external">策略模式 Demo</a></p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>《大话设计模式》</p>
<p><a href="http://mobile.51cto.com/ahot-418972.htm" target="_blank" rel="external">安卓设计模式–策略模式</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最简单的商场收银软件&quot;&gt;&lt;a href=&quot;#最简单的商场收银软件&quot; class=&quot;headerlink&quot; title=&quot;最简单的商场收银软件&quot;&gt;&lt;/a&gt;最简单的商场收银软件&lt;/h1&gt;&lt;p&gt;如果要做一款收银软件，营业员根据客户所购买商品单价和数量向客户收费，这非常容易。&lt;/p&gt;
&lt;p&gt;Demo 如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/XBz9iW5.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Path 实战</title>
<<<<<<< HEAD
    <link href="http://yoursite.com/2017/04/15/Path%E5%AE%9E%E6%88%98%E4%B9%8B%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/04/15/Path实战之雷达图/</id>
    <published>2017-04-15T03:39:13.886Z</published>
    <updated>2017-05-14T12:36:54.333Z</updated>
=======
    <link href="http://yoursite.com/2017/04/10/Path%E5%AE%9E%E6%88%98%E4%B9%8B%E9%9B%B7%E8%BE%BE%E5%9B%BE/"/>
    <id>http://yoursite.com/2017/04/10/Path实战之雷达图/</id>
    <published>2017-04-10T07:31:25.208Z</published>
    <updated>2017-04-21T08:27:14.660Z</updated>
>>>>>>> 333dba136f4dcd9284a99e103790547582a4811f
    
    <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>我们将从0到1一步一步来画一个 web 页面很常见的雷达图<br><a id="more"></a></p>
<h1 id="第一步：绘制蜘蛛网络"><a href="#第一步：绘制蜘蛛网络" class="headerlink" title="第一步：绘制蜘蛛网络"></a>第一步：绘制蜘蛛网络</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">    mainPaint=<span class="keyword">new</span> Paint();</div><div class="line">    mainPaint.setColor(Color.BLACK);</div><div class="line">    mainPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">    mainPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">    mainPaint.setStyle(Paint.Style.STROKE);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">    radius=Math.min(w,h)/<span class="number">2</span>*<span class="number">0.9f</span>;</div><div class="line">    centerX=w/<span class="number">2</span>;</div><div class="line">    centerY=h/<span class="number">2</span>;</div><div class="line">    <span class="comment">//一旦size发生改变，重新绘制</span></div><div class="line">    postInvalidate();</div><div class="line">    <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    drawPolygon(canvas);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制多边形</div><div class="line"> * <span class="doctag">@param</span> canvas</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawPolygon</span><span class="params">(Canvas canvas)</span></span>&#123;</div><div class="line">    Path path=<span class="keyword">new</span> Path();</div><div class="line">    <span class="comment">//1度=1*PI/180   360度=2*PI   那么我们每旋转一次的角度为2*PI/内角个数</span></div><div class="line">    <span class="comment">//中心与相邻两个内角相连的夹角角度</span></div><div class="line">    angle= (<span class="keyword">float</span>) (<span class="number">2</span>*Math.PI/count);</div><div class="line">    <span class="comment">//每个蛛丝之间的间距</span></div><div class="line">    <span class="keyword">float</span> r= radius/(count-<span class="number">1</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">//当前半径</span></div><div class="line">        <span class="keyword">float</span> curR=r*i;</div><div class="line">        path.reset();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count; j++) &#123;</div><div class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)&#123;</div><div class="line">                path.moveTo(centerX+curR,centerY);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//对于直角三角形sin(x)是对边比斜边，cos(x)是底边比斜边，tan(x)是对边比底边</span></div><div class="line">                <span class="comment">//因此可以推导出:底边(x坐标)=斜边(半径)*cos(夹角角度)</span></div><div class="line">                <span class="comment">//               对边(y坐标)=斜边(半径)*sin(夹角角度)</span></div><div class="line">                <span class="keyword">float</span> x = (<span class="keyword">float</span>) (centerX+curR*Math.cos(angle*j));</div><div class="line">                <span class="keyword">float</span> y = (<span class="keyword">float</span>) (centerY+curR*Math.sin(angle*j));</div><div class="line">                path.lineTo(x,y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        path.close();</div><div class="line">        canvas.drawPath(path,mainPaint);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>绘制蜘蛛网络其实就是绘制指定边数的正多边形，这一步比较简单，比较难的可能就是每个顶点的算法，相关注释我都写了，还有一张来自互联网的图以助于思考，如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-f380ea0f04b8619b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多边形夹角示意图"></p>
<p>绘制出的多边形成品如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-35a0029632035330.gif?imageMogr2/auto-orient/strip" alt="多边形效果.gif"></p>
<p>动画效果只是写了 set 方法，用 handler 实现,代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//设置数值种类</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.count = count;</div><div class="line">    postInvalidate();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//设置蜘蛛网颜色</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMainPaint</span><span class="params">(Paint mainPaint)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.mainPaint = mainPaint;</div><div class="line">    postInvalidate();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mainPaint=<span class="keyword">new</span> Paint();</div><div class="line">mainPaint.setAntiAlias(<span class="keyword">true</span>);</div><div class="line">mainPaint.setStrokeWidth(<span class="number">1</span>);</div><div class="line">mainPaint.setStyle(Paint.Style.STROKE);</div><div class="line">Handler handler=<span class="keyword">new</span> Handler();</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; <span class="number">20</span>; i++) &#123;</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</div><div class="line">handler.postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        mRdv.setCount(finalI);</div><div class="line">        mainPaint.setStrokeWidth(finalI);</div><div class="line">        mRdv.setMainPaint(mainPaint);</div><div class="line">    &#125;</div><div class="line">&#125;,i*<span class="number">300</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="第二步：绘制对角线"><a href="#第二步：绘制对角线" class="headerlink" title="第二步：绘制对角线"></a>第二步：绘制对角线</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制直线</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawLines</span><span class="params">(Canvas canvas)</span></span>&#123;</div><div class="line">    Path path=<span class="keyword">new</span> Path();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        path.reset();</div><div class="line">        path.moveTo(centerX,centerY);</div><div class="line">        <span class="keyword">float</span> x = (<span class="keyword">float</span>) (centerX+radius*Math.cos(angle*i));</div><div class="line">        <span class="keyword">float</span> y = (<span class="keyword">float</span>) (centerY+radius*Math.sin(angle*i));</div><div class="line">        path.lineTo(x,y);</div><div class="line">        canvas.drawPath(path,mainPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这一步比较简单，就是将中心点和各个顶点连接起来，效果如下:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-e8349daa51b18b38.gif?imageMogr2/auto-orient/strip" alt="多边形效果.gif"></p>
<h1 id="第三步：绘制标题文字"><a href="#第三步：绘制标题文字" class="headerlink" title="第三步：绘制标题文字"></a>第三步：绘制标题文字</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制标题文字</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> canvas</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTitle</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (count != titles.size()) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//相关知识点:http://mikewang.blog.51cto.com/3826268/871765/</span></div><div class="line">    Paint.FontMetrics fontMetrics = textPaint.getFontMetrics();</div><div class="line">    <span class="keyword">float</span> fontHeight = fontMetrics.descent - fontMetrics.ascent;</div><div class="line">    <span class="comment">//绘制文字时不让文字和雷达图形交叉,加大绘制半径</span></div><div class="line">    <span class="keyword">float</span> textRadius = radius + fontHeight;</div><div class="line">    <span class="keyword">double</span> pi = Math.PI;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="keyword">float</span> x = (<span class="keyword">float</span>) (centerX + textRadius * Math.cos(angle * i));</div><div class="line">        <span class="keyword">float</span> y = (<span class="keyword">float</span>) (centerY + textRadius * Math.sin(angle * i));</div><div class="line">        <span class="comment">//当前绘制标题所在顶点角度</span></div><div class="line">        <span class="keyword">float</span> degrees = angle * i;</div><div class="line">        <span class="comment">//从右下角开始顺时针画起,与真实坐标系相反</span></div><div class="line">        <span class="keyword">if</span> (degrees &gt;= <span class="number">0</span> &amp;&amp; degrees &lt; pi / <span class="number">2</span>) &#123;<span class="comment">//第四象限</span></div><div class="line">            <span class="keyword">float</span> dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()-<span class="number">1</span>);</div><div class="line">            canvas.drawText(titles.get(i), x+dis, y, textPaint);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degrees &gt;= pi / <span class="number">2</span> &amp;&amp; degrees &lt; pi) &#123;<span class="comment">//第三象限</span></div><div class="line">            <span class="keyword">float</span> dis=textPaint.measureText(titles.get(i))/(titles.get(i).length()-<span class="number">1</span>);</div><div class="line">            canvas.drawText(titles.get(i), x-dis, y, textPaint);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degrees &gt;= pi &amp;&amp; degrees &lt; <span class="number">3</span> * pi / <span class="number">2</span>) &#123;<span class="comment">//第二象限</span></div><div class="line">            <span class="keyword">float</span> dis=textPaint.measureText(titles.get(i))/(titles.get(i).length());</div><div class="line">            canvas.drawText(titles.get(i), x-dis, y, textPaint);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (degrees &gt;= <span class="number">3</span> * pi / <span class="number">2</span> &amp;&amp; degrees &lt;= <span class="number">2</span> * pi) &#123;<span class="comment">//第一象限</span></div><div class="line">            canvas.drawText(titles.get(i), x, y, textPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-c9132f5ff1404eaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<h1 id="第四步：绘制覆盖区域"><a href="#第四步：绘制覆盖区域" class="headerlink" title="第四步：绘制覆盖区域"></a>第四步：绘制覆盖区域</h1><p>要绘制覆盖区域，首先要指定最大值和每个分类的具体数值,有了这些数值之后，就可以绘制了。</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 绘制覆盖区域</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawRegion</span><span class="params">(Canvas canvas)</span></span>&#123;</div><div class="line">    valuePaint.setAlpha(<span class="number">255</span>);</div><div class="line">    Path path=<span class="keyword">new</span> Path();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">        <span class="comment">//计算该数值与最大值比例</span></div><div class="line">        Double perCenter = data.get(i)/maxValue;</div><div class="line">        <span class="comment">//小圆点所在位置距离圆心的距离</span></div><div class="line">        <span class="keyword">double</span> perRadius=perCenter*radius;</div><div class="line">        <span class="keyword">float</span> x = (<span class="keyword">float</span>) (centerX + perRadius * Math.cos(angle * i));</div><div class="line">        <span class="keyword">float</span> y = (<span class="keyword">float</span>) (centerY + perRadius * Math.sin(angle * i));</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123;</div><div class="line">            path.moveTo(x,y);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            path.lineTo(x,y);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//绘制小圆点</span></div><div class="line">        canvas.drawCircle(x,y,<span class="number">10</span>,valuePaint);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//闭合覆盖区域</span></div><div class="line">    path.close();</div><div class="line">    valuePaint.setStyle(Paint.Style.STROKE);</div><div class="line">    <span class="comment">//绘制覆盖区域外的连线</span></div><div class="line">    canvas.drawPath(path, valuePaint);</div><div class="line">    <span class="comment">//填充覆盖区域</span></div><div class="line">    valuePaint.setAlpha(<span class="number">128</span>);</div><div class="line">    valuePaint.setStyle(Paint.Style.FILL);</div><div class="line">    canvas.drawPath(path,valuePaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看一下效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-d62b189d8dce1fac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p>再来看一下动态的效果吧：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/3054656-50a0b0225608fc7b.gif?imageMogr2/auto-orient/strip" alt="多边形效果.gif"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>终于完成了,全部代码在下面：</p>
<p><a href="https://github.com/jutao/AndroidNode/blob/master/2017/2017.3/%E9%9B%B7%E8%BE%BE%E5%9B%BE%E5%85%A8%E9%83%A8%E4%BB%A3%E7%A0%81.md" target="_blank" rel="external">Android雷达图全部代码 </a></p>
<p>主要是参考 crazy__chen 大神的博客，链接贴在下面，做了一遍其实还蛮简单的，这个控件还有很多不完善的，如果实际使用需要改善的地方还有很多，如果有不足希望大家可以告诉我，谢谢！！</p>
<p>参考资料</p>
<p><a href="http://blog.csdn.net/crazy__chen/article/details/50163693" target="_blank" rel="external">Android雷达图(蜘蛛网图)绘制 </a></p>
<p><a href="https://github.com/GcsSloop/AndroidNote/blob/master/CustomView/Advance/%5B05%5DPath_Basic.md" target="_blank" rel="external">Path之基本操作</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h1&gt;&lt;p&gt;我们将从0到1一步一步来画一个 web 页面很常见的雷达图&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Path" scheme="http://yoursite.com/tags/Path/"/>
    
      <category term="自定义控件" scheme="http://yoursite.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6/"/>
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
</feed>
